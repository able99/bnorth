[{"tags":[{"type":"copyright","string":"(c) 2016 able99","html":"<p>(c) 2016 able99</p>"},{"type":"author","string":"able99 (8846755@qq.com)","html":"<p>able99 (8846755@qq.com)</p>"},{"type":"license","string":"MIT","html":"<p>MIT</p>"}],"description":{"full":"<p>bnorth solution</p>","summary":"<p>bnorth solution</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1,"codeStart":9,"code":"import Url from 'url-parse';\nimport { getBrowserTitle, setBrowserTitle } from '../utils/browser';","ctx":false},{"tags":[{"type":"class","string":"","html":""},{"type":"example","string":"```js\n|使用\napp.browser.xxx\n|hook\n// 在原函数上增加某些处理\napp.browser.xxx = function(...args){\n  ... // 增加某些处理\n  return app.Browser.prototype.xxx.apply(this, args);\n}\n// 直接修改原函数\napp.Browser.prototype.xxx = function(...args) {\n  ... // 修改原函数\n}\n```","html":"<pre><code class=\"lang-js\">|使用\napp.browser.xxx\n|hook\n// 在原函数上增加某些处理\napp.browser.xxx = function(...args){\n  ... // 增加某些处理\n  return app.Browser.prototype.xxx.apply(this, args);\n}\n// 直接修改原函数\napp.Browser.prototype.xxx = function(...args) {\n  ... // 修改原函数\n}\n</code></pre>"}],"description":{"full":"<p>提供操作浏览器的功能插件</p>","summary":"<p>提供操作浏览器的功能插件</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":false,"line":13,"codeStart":32,"code":"class Browser {\n  constructor(app) {\n    this.app = app;\n    this.uaInit();\n  };\n\n  //ua\n  //------------------------------","ctx":{"type":"class","constructor":"Browser","cons":"Browser","name":"Browser","extends":"","string":"new Browser()"}},{"tags":[{"type":"property","string":"{string} ua 浏览器的user agent","name":"ua","description":"<p>浏览器的user agent</p>","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":40,"codeStart":43,"code":"get ua() {\n  return window.navigator.userAgent;\n}","ctx":{"type":"property","constructor":"Browser","cons":"Browser","name":"ua","string":"Browser.prototype.ua"}},{"tags":[{"type":"method","string":"","html":""}],"description":{"full":"<p>在初始化时，计算浏览器类型的函数，包括<br />\nisMobile, isiOS, isAndroid, isWeChat, isAliPay<br />\n可以hook该函数，增加更多的浏览器类型</p>\n<pre><code class=\"lang-js\">this.isWeChat  = /(?:micromessenger)/.test(ua);\n</code></pre>","summary":"<p>在初始化时，计算浏览器类型的函数，包括<br />\nisMobile, isiOS, isAndroid, isWeChat, isAliPay<br />\n可以hook该函数，增加更多的浏览器类型</p>\n<pre><code class=\"lang-js\">this.isWeChat  = /(?:micromessenger)/.test(ua);\n</code></pre>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":47,"codeStart":56,"code":"uaInit() {\n  let ua = this.ua.toLowerCase();\n  this.isMobile  = /(?:micromessenger|mobile|iphone|ipod|android|coolpad|mmp|smartphone|midp|wap|xoom|symbian|j2me|blackberry|windows phone|win ce)/.test(ua);\n  this.isiOS     = /(?:iphone)/.test(ua);\n  this.isAndroid = /(?:android)/.test(ua);\n  this.isWeChat  = /(?:micromessenger)/.test(ua);\n  this.isAliPay  = /alipayclient/.test(ua);\n}\n\n//title\n//------------------------------","ctx":{"type":"method","constructor":"Browser","cons":"Browser","name":"uaInit","string":"Browser.prototype.uaInit()"}},{"tags":[{"type":"property","string":"{string} title 设置和读取浏览器标题栏的文字","name":"title","description":"<p>设置和读取浏览器标题栏的文字</p>","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":67,"codeStart":70,"code":"get title(){\n  return getBrowserTitle();\n};\n\nset title(str){\n  return setBrowserTitle(str);\n};\n\n//ico\n//------------------------------","ctx":{"type":"property","constructor":"Browser","cons":"Browser","name":"title","string":"Browser.prototype.title"}},{"tags":[{"type":"property","string":"{string} title 设置和读取浏览器标题栏的图标","name":"title","description":"<p>设置和读取浏览器标题栏的图标</p>","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":80,"codeStart":83,"code":"set icon(url) {\n  var ico = document.createElement('link');\n  ico.setAttribute(\"rel\", \"shortcut icon\")\n  ico.setAttribute(\"href\", url)\n  document.getElementsByTagName(\"head\")[0].appendChild(ico);\n}\n\n//url\n//------------------------------","ctx":{"type":"property","constructor":"Browser","cons":"Browser","name":"icon","string":"Browser.prototype.icon"}},{"tags":[{"type":"method","string":"","html":""}],"description":{"full":"<p>返回当前页面的url地址</p>","summary":"<p>返回当前页面的url地址</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":92,"codeStart":96,"code":"url(){\n  return window.location.href;\n};","ctx":{"type":"method","constructor":"Browser","cons":"Browser","name":"url","string":"Browser.prototype.url()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{string} url - url地址","name":"url","description":"<ul>\n<li>url地址</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Url} - url解析类","types":["Url"],"typesDescription":"<a href=\"Url.html\">Url</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li>url解析类</li>\n</ul>"}],"description":{"full":"<p>返回解析后的url的类，<a href=\"https://github.com/unshiftio/url-parse\">具体参见</a></p>","summary":"<p>返回解析后的url的类，<a href=\"https://github.com/unshiftio/url-parse\">具体参见</a></p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":99,"codeStart":105,"code":"parseUrl(url){\n  url = url || this.url();\n  return Url(url,true);\n};","ctx":{"type":"method","constructor":"Browser","cons":"Browser","name":"parseUrl","string":"Browser.prototype.parseUrl()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{Url} url ","name":"url","description":"","types":["Url"],"typesDescription":"<a href=\"Url.html\">Url</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Url} url</p>"},{"type":"param","string":"{object} [query=null] - 添加到url中的查询字符串 ","name":"[query=null]","description":"<ul>\n<li>添加到url中的查询字符串</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"returns","string":"{string} - url字符串","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li>url字符串</li>\n</ul>"}],"description":{"full":"<p>将url类格式化成字符串</p>","summary":"<p>将url类格式化成字符串</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":109,"codeStart":116,"code":"formatUrl(url, query=null){\n  if(!url)return \"/\";\n  if(!query && typeof(url)==='string') return url;\n\n  url = (url instanceof Url)?url:Url(typeof(url)==='object'?url.pathname:url,true);\n  query = query||{};\n\n  for (let key in query) {\n    url.query[key] = query[key];\n  }\n  \n  return url.toString();\n};\n\n//parser\n//------------------------------","ctx":{"type":"method","constructor":"Browser","cons":"Browser","name":"formatUrl","string":"Browser.prototype.formatUrl()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{...args} args","name":"args","description":"","types":["args"],"typesDescription":"...<a href=\"args.html\">args</a>","optional":false,"nullable":false,"nonNullable":false,"variable":true,"html":"<p>{...args} args</p>"}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":132,"codeStart":136,"code":"queryParse(...args) {\n  return Url.qs.parse(...args);\n}","ctx":{"type":"method","constructor":"Browser","cons":"Browser","name":"queryParse","string":"Browser.prototype.queryParse()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{...args} args","name":"args","description":"","types":["args"],"typesDescription":"...<a href=\"args.html\">args</a>","optional":false,"nullable":false,"nonNullable":false,"variable":true,"html":"<p>{...args} args</p>"}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":139,"codeStart":143,"code":"queryStringify(...args) {\n  return Url.qs.stringify(...args);\n}\n\n//navi\n//------------------------------","ctx":{"type":"method","constructor":"Browser","cons":"Browser","name":"queryStringify","string":"Browser.prototype.queryStringify()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{string|Url} url - 地址字符串或者url 解析类","name":"url","description":"<ul>\n<li>地址字符串或者url 解析类</li>\n</ul>","types":["string","Url"],"typesDescription":"<code>string</code>|<a href=\"Url.html\">Url</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{object} [params=null] - 查询字符串","name":"[params=null]","description":"<ul>\n<li>查询字符串</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>浏览器跳转到指定地址，可返回当前地址</p>","summary":"<p>浏览器跳转到指定地址，可返回当前地址</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":149,"codeStart":155,"code":"push(url,params){\n  if(typeof(url)==='object'){\n    params = Object.assign({},url.state||{},url.query||{});\n    url = url.pathname||'/';\n  }\n\n  window.location.href = this.formatUrl(url,params);\n};","ctx":{"type":"method","constructor":"Browser","cons":"Browser","name":"push","string":"Browser.prototype.push()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{string|Url} url - 地址字符串或者url 解析类","name":"url","description":"<ul>\n<li>地址字符串或者url 解析类</li>\n</ul>","types":["string","Url"],"typesDescription":"<code>string</code>|<a href=\"Url.html\">Url</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{object} [params=null] - 查询字符串","name":"[params=null]","description":"<ul>\n<li>查询字符串</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>浏览器替换当前地址到指定地址，无法再返回当前地址</p>","summary":"<p>浏览器替换当前地址到指定地址，无法再返回当前地址</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":163,"codeStart":169,"code":"replace(url,params){\n  if(typeof(url)==='object'){\n    params = Object.assign({},url.state||{},url.query||{});\n    url.pathname = url.pathname||'/';\n  }\n  \n  url = this.formatUrl(url,params);\n  window.location.replace(url);\n};","ctx":{"type":"method","constructor":"Browser","cons":"Browser","name":"replace","string":"Browser.prototype.replace()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{number} step=1 - 返回级数","name":"step=1","description":"<ul>\n<li>返回级数</li>\n</ul>","types":["number"],"typesDescription":"<code>number</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>返回指定到之前数量的之前地址</p>","summary":"<p>返回指定到之前数量的之前地址</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":178,"codeStart":183,"code":"back(step=1){\n  window.history.go(-step);\n};","ctx":{"type":"method","constructor":"Browser","cons":"Browser","name":"back","string":"Browser.prototype.back()"}},{"tags":[{"type":"param","string":"{number} delay - 延时的毫秒数","name":"delay","description":"<ul>\n<li>延时的毫秒数</li>\n</ul>","types":["number"],"typesDescription":"<code>number</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>重新加载当前页面</p>","summary":"<p>重新加载当前页面</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":186,"codeStart":190,"code":"reload(delay) {\n  window.location.reload();\n}\n\n//jsload\n//------------------------------","ctx":{"type":"method","constructor":"Browser","cons":"Browser","name":"reload","string":"Browser.prototype.reload()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{string} filename - js的文件地址","name":"filename","description":"<ul>\n<li>js的文件地址</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{boolean} nocache - 通过添加version，防止缓存","name":"nocache","description":"<ul>\n<li>通过添加version，防止缓存</li>\n</ul>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Promise} - 异步加载结果","types":["Promise"],"typesDescription":"<a href=\"Promise.html\">Promise</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li>异步加载结果</li>\n</ul>"}],"description":{"full":"<p>异步加载js，返回promise</p>","summary":"<p>异步加载js，返回promise</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":196,"codeStart":203,"code":"loadjs(filename, nocache){\n  return new Promise((resolve,reject)=>{\n    if(!filename){\n      reject(\"js filename error\");\n    }\n    let version = nocache===false?'':(nocache||Math.ceil((new Date()).getTime()/(1000*60)))\n\n    var fileref=document.createElement('script')\n    fileref.setAttribute(\"type\",\"text/javascript\")\n    fileref.setAttribute(\"src\", `${filename}${filename.indexOf('?')?'?':'&'}version=${version}`)\n    fileref.onload = ()=>{resolve()};\n    fileref.onerror = (error)=>{reject(error)};\n    document.getElementsByTagName(\"head\")[0].appendChild(fileref);  \n  });\n}\n}\n\nexport default {\ninit(app) {\n  app.Browser = Browser;\n  app.browser = new Browser(app);\n}\n}","ctx":{"type":"method","constructor":"Browser","cons":"Browser","name":"loadjs","string":"Browser.prototype.loadjs()"}}]
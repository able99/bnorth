[{"tags":[{"type":"copyright","string":"(c) 2016 able99","html":"<p>(c) 2016 able99</p>"},{"type":"author","string":"able99 (8846755@qq.com)","html":"<p>able99 (8846755@qq.com)</p>"},{"type":"license","string":"MIT","html":"<p>MIT</p>"}],"description":{"full":"<p>bnorth solution</p>","summary":"<p>bnorth solution</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1,"codeStart":9,"code":"import { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'","ctx":false},{"tags":[{"type":"function","string":"","html":""},{"type":"param","string":"{App} app - instance of App class","name":"app","description":"<ul>\n<li>instance of App class</li>\n</ul>","types":["App"],"typesDescription":"<a href=\"App.html\">App</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{object} props - props for component","name":"props","description":"<ul>\n<li>props for component</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>get container unique key, diff key diff params or querys</p>","summary":"<p>get container unique key, diff key diff params or querys</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":true,"line":12,"codeStart":18,"code":"function getContainerKey(app, props) {\n  let key = 'ck';\n  for(let route of props.routes){\n    if(route.path) {\n      key+='-'+route.path\n    }\n    if(route===props.route) {\n      break;\n    }\n  }\n  return key;\n}","ctx":{"type":"function","name":"getContainerKey","string":"getContainerKey()"}},{"tags":[{"type":"function","string":"","html":""},{"type":"param","string":"{App} app - instance of App class","name":"app","description":"<ul>\n<li>instance of App class</li>\n</ul>","types":["App"],"typesDescription":"<a href=\"App.html\">App</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{object} props - props for component","name":"props","description":"<ul>\n<li>props for component</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{function} container - the container function","name":"container","description":"<ul>\n<li>the container function</li>\n</ul>","types":["function"],"typesDescription":"<code>function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"callback","string":"cb","html":"<p>cb</p>"}],"description":{"full":"<p>creator or getter (if exist) of the container</p>","summary":"<p>creator or getter (if exist) of the container</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":true,"line":31,"codeStart":39,"code":"function getContainer(app, props, acontainer, cb) {\n  if(!acontainer) return;\n  let key = getContainerKey(app, props); \n  let container = acontainer[key];\n\n  if(!container){\n    container = {\n      states:{\n        data: app.actionStates.data&&app.actionStates.data({}),\n        _page: app.actionStates.data({initData:{\n          layers: [],\n        }}), \n      },\n      reducers: {},\n      actions:{},\n      handlers: {},\n    }\n\n    if(acontainer!==true) {\n      try{\n        acontainer(app, props, container);\n      }catch(e){\n        app.error(e);\n        app.errorRender(e,'container error');\n      }\n      acontainer[key] = container;\n    }\n    cb&&cb(container);\n  }\n\n  return container;\n}","ctx":{"type":"function","name":"getContainer","string":"getContainer()"}},{"tags":[{"type":"function","string":"","html":""},{"type":"param","string":"{array} states - state list","name":"states","description":"<ul>\n<li>state list</li>\n</ul>","types":["array"],"typesDescription":"<code>array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{string} event - event","name":"event","description":"<ul>\n<li>event</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>utiles for states event handle</p>","summary":"<p>utiles for states event handle</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":true,"line":72,"codeStart":78,"code":"function statesHandler(states, event) {\n  Object.entries(states||{})\n  .forEach(([key,val])=>{\n    if(!key||(key[0]==='_'&&key[0]!=='_page')) return;\n    let func = val&&val[event];\n    if(func)func.apply(val);\n  })\n}","ctx":{"type":"function","name":"statesHandler","string":"statesHandler()"}},{"tags":[{"type":"function","string":"","html":""},{"type":"param","string":"{App} app - instance of App class","name":"app","description":"<ul>\n<li>instance of App class</li>\n</ul>","types":["App"],"typesDescription":"<a href=\"App.html\">App</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{function} container - container function","name":"container","description":"<ul>\n<li>container function</li>\n</ul>","types":["function"],"typesDescription":"<code>function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>create container use container function</p>","summary":"<p>create container use container function</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":true,"line":88,"codeStart":94,"code":"export default function(app, acontainer) {\n  if(Array.isArray(acontainer)) return connect(...acontainer);\n\n  let mapState = (state, props)=>{\n    let container = getContainer(app, props, acontainer, (container)=>{\n      container.actions = bindActionCreators(container.actions, app.actionStore.dispatch);\n    });\n\n    let ret = {};\n    if(!container) return ret;\n    Object.entries(container.reducers||{}).forEach(([key,v])=>{\n      if(v===true)ret[\"state_\"+key] = state[v===true?key:v];\n    });\n    Object.entries(container.states||{}).forEach(([key,v])=>{\n      ret[\"state_\"+key] = v.state;\n      for(let [skey, val] of Object.entries(v.states||{})){\n        ret[`state_${key}_${skey}`] = val;\n      }\n    });\n    return ret;\n  }\n\n  let mapDispatch = (dispatch, props)=>{\n    let container = getContainer(app, props, acontainer);\n    if(!container) return {app};\n\n    return {\n      app,\n      container,\n      states: container.states,\n\n      onWillStart(page) {\n        if(container.handlers.onWillStart)container.handlers.onWillStart(app,page,container);\n      },\n      onStart(page) {\n        if(container.handlers.onStart)container.handlers.onStart(app,page,container);\n        statesHandler(container.states, 'onStart');\n      },\n      onPause(page) {\n        if(container.handlers.onPause)container.handlers.onPause(app,page,container);\n        statesHandler(container.states, 'onPause');\n      },\n      onResume(page) {\n        if(container.handlers.onResume)container.handlers.onResume(app,page,container);\n        statesHandler(container.states, 'onResume');\n      },\n      onStop(page) {\n        delete acontainer[getContainerKey(app, props)];\n        if(container.handlers.onStop)container.handlers.onStop(app,page,container);\n        statesHandler(container.states, 'onStop');\n      }\n    }\n  }\n\n  return connect(mapState, mapDispatch);\n}","ctx":{"type":"function","name":"","string":"()"}},{"tags":[{"type":"class","string":"container","html":"<p>container</p>"},{"type":"example","string":"```js\nexport default function(app, props, container) {\n  container.states.data = app.actionStates.data({});\n  container.actions.test = ()=>()=>{};\n  container.handler.onStart = ()=>{};\n}\n```","html":"<pre><code class=\"lang-js\">export default function(app, props, container) {\n  container.states.data = app.actionStates.data({});\n  container.actions.test = ()=&gt;()=&gt;{};\n  container.handler.onStart = ()=&gt;{};\n}\n</code></pre>"}],"description":{"full":"<p>bnorth 中页面container 组件，页面的容器类，负责页面的逻辑部分<br />\n实现container 函数后，由containerHoc 进行转换</p>","summary":"<p>bnorth 中页面container 组件，页面的容器类，负责页面的逻辑部分<br />\n实现container 函数后，由containerHoc 进行转换</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":false,"line":152,"codeStart":165},{"tags":[{"type":"property","string":"{state[]} states","name":"states","description":"","types":["Array.<state>"],"typesDescription":"<code>Array</code>.&lt;<a href=\"state.html\">state</a>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{state[]} states</p>"}],"description":{"full":"<p>state 列表</p>","summary":"<p>state 列表</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":166,"codeStart":170},{"tags":[{"type":"property","string":"{string[]} reduxers","name":"reduxers","description":"","types":["Array.<string>"],"typesDescription":"<code>Array</code>.&lt;<code>string</code>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{string[]} reduxers</p>"}],"description":{"full":"<p>数据仓库中数据映射列表，<br />\n指定仓库中的reduxer名字的数据，会被映射到 页面Page props 中</p>","summary":"<p>数据仓库中数据映射列表，<br />\n指定仓库中的reduxer名字的数据，会被映射到 页面Page props 中</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":171,"codeStart":176},{"tags":[{"type":"property","string":"{action[]} actions","name":"actions","description":"","types":["Array.<action>"],"typesDescription":"<code>Array</code>.&lt;<a href=\"action.html\">action</a>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{action[]} actions</p>"}],"description":{"full":"<p>action 函数列表</p>","summary":"<p>action 函数列表</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":177,"codeStart":181},{"tags":[{"type":"property","string":"{function[]} handlers","name":"handlers","description":"","types":["Array.<function>"],"typesDescription":"<code>Array</code>.&lt;<code>function</code>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{function[]} handlers</p>"}],"description":{"full":"<p>事件处理函数列表</p>","summary":"<p>事件处理函数列表</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":182,"codeStart":186},{"tags":[{"type":"function","string":"contianerFunction","html":"<p>contianerFunction</p>"},{"type":"param","string":"{App} app - App 的实例","name":"app","description":"<ul>\n<li>App 的实例</li>\n</ul>","types":["App"],"typesDescription":"<a href=\"App.html\">App</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{object} props - 页面的属性","name":"props","description":"<ul>\n<li>页面的属性</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{object} container - container模板，在此函数中，扩展该属性","name":"container","description":"<ul>\n<li>container模板，在此函数中，扩展该属性</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"example","string":"```js\nexport default function(app, props, container) {\n  container.states.data = app.actionStates.data({});\n}\n```","html":"<pre><code class=\"lang-js\">export default function(app, props, container) {\n  container.states.data = app.actionStates.data({});\n}\n</code></pre>"}],"description":{"full":"<p>container函数是页面组件的逻辑控制函数，为页面组件提供数据和actions 供页面组件调用<br />\nbnorth 会通过containerHoc 进行转换<br />\n<strong>states</strong>：<br />\nstate 是bnroth 的概念，是数据的管理器，每个管理器有自己的名字。bnorth 提供了一些数据管理器，并将管理器的创建函数放在app.actionStates 中，比如页面数据管理器 data 等。<br />\nstate 的建立，用数据管理器创建函数建立好，并添加到states中</p>\n<pre><code class=\"lang-js\">container.states.data = app.actionStates.data({});\n</code></pre>\n<p>state 的数据访问</p>\n<pre><code class=\"lang-js\">this.props.state_data\n</code></pre>\n<p>state 管理器的访问</p>\n<pre><code class=\"lang-js\">this.props.states.data      // 在页面Page 中\ncontainer.props.states.data // 在页面container function 中\n</code></pre>\n<p>编写新的数据管理器</p>\n<ol>\n<li>建立class</li>\n<li>实现state 函数，该函数返回的数据将会被映射到props.state_{name}</li>\n<li>实现states 函数，该返回对象，对象中的每个键值对的值将被逐一映射到 props.state_{name}_{key}</li>\n<li>根据需要实现页面生命周期函数的回调函数</li>\n</ol>\n<p><strong>reduxers</strong>：<br />\nreduxer 映射列表，reduxer是redux 的概念，redux 通过多个reduxer 将仓库分为不同部分，每个reduxer 有自己的名字。映射列表中的字符串即为redxuer 的名字列表。<br />\n设置后，数据仓库中对应的数据，将被映射到页面page 的props 中。<br />\n<strong>actions</strong>：<br />\n供页面调用的action 函数添加到模板的actions 中，action 是redux 的概念，符合 redux-trunk 标准。<br />\n定义</p>\n<pre><code class=\"lang-js\">container.actions.test = (args)=&gt;()=&gt;{\n  ...\n};\n</code></pre>\n<p>页面Page 中使用</p>\n<pre><code class=\"lang-js\">this.props.container.actions.test(args)\n</code></pre>\n<p><strong>handlers</strong>：<br />\n与事件同名的处理函数添加到container 模板的handlers 中，事件触发时，该函数将会被调用。<br />\n事件包括，app 触发的事件与组件的生命周期事件，包括：<br />\nonWillStart(page) - 页面将要启动时触发，参数page 为页面Page 实例<br />\nonStart(page) - 页面启动时触发，参数page 为页面Page 实例<br />\nonPause(page) - 页面失去焦点启动时触发，参数page 为页面Page 实例<br />\nonResume(page) - 页面获取焦点时触发，参数page 为页面Page 实例<br />\nonStop(page) - 页面关闭时触发，参数page 为页面Page 实例</p>","summary":"<p>container函数是页面组件的逻辑控制函数，为页面组件提供数据和actions 供页面组件调用<br />\nbnorth 会通过containerHoc 进行转换<br />\n<strong>states</strong>：<br />\nstate 是bnroth 的概念，是数据的管理器，每个管理器有自己的名字。bnorth 提供了一些数据管理器，并将管理器的创建函数放在app.actionStates 中，比如页面数据管理器 data 等。<br />\nstate 的建立，用数据管理器创建函数建立好，并添加到states中</p>\n<pre><code class=\"lang-js\">container.states.data = app.actionStates.data({});\n</code></pre>\n<p>state 的数据访问</p>\n<pre><code class=\"lang-js\">this.props.state_data\n</code></pre>\n<p>state 管理器的访问</p>\n<pre><code class=\"lang-js\">this.props.states.data      // 在页面Page 中\ncontainer.props.states.data // 在页面container function 中\n</code></pre>\n<p>编写新的数据管理器</p>\n<ol>\n<li>建立class</li>\n<li>实现state 函数，该函数返回的数据将会被映射到props.state_{name}</li>\n<li>实现states 函数，该返回对象，对象中的每个键值对的值将被逐一映射到 props.state_{name}_{key}</li>\n<li>根据需要实现页面生命周期函数的回调函数</li>\n</ol>","body":"<p><strong>reduxers</strong>：<br />\nreduxer 映射列表，reduxer是redux 的概念，redux 通过多个reduxer 将仓库分为不同部分，每个reduxer 有自己的名字。映射列表中的字符串即为redxuer 的名字列表。<br />\n设置后，数据仓库中对应的数据，将被映射到页面page 的props 中。<br />\n<strong>actions</strong>：<br />\n供页面调用的action 函数添加到模板的actions 中，action 是redux 的概念，符合 redux-trunk 标准。<br />\n定义</p>\n<pre><code class=\"lang-js\">container.actions.test = (args)=&gt;()=&gt;{\n  ...\n};\n</code></pre>\n<p>页面Page 中使用</p>\n<pre><code class=\"lang-js\">this.props.container.actions.test(args)\n</code></pre>\n<p><strong>handlers</strong>：<br />\n与事件同名的处理函数添加到container 模板的handlers 中，事件触发时，该函数将会被调用。<br />\n事件包括，app 触发的事件与组件的生命周期事件，包括：<br />\nonWillStart(page) - 页面将要启动时触发，参数page 为页面Page 实例<br />\nonStart(page) - 页面启动时触发，参数page 为页面Page 实例<br />\nonPause(page) - 页面失去焦点启动时触发，参数page 为页面Page 实例<br />\nonResume(page) - 页面获取焦点时触发，参数page 为页面Page 实例<br />\nonStop(page) - 页面关闭时触发，参数page 为页面Page 实例</p>"},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":188,"codeStart":246}]
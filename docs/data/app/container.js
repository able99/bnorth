[{"tags":[{"type":"copyright","string":"(c) 2016 able99","html":"<p>(c) 2016 able99</p>"},{"type":"author","string":"able99 (8846755@qq.com)","html":"<p>able99 (8846755@qq.com)</p>"},{"type":"license","string":"MIT","html":"<p>MIT</p>"}],"description":{"full":"<p>bnorth solution</p>","summary":"<p>bnorth solution</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1,"codeStart":9,"code":"import { connect } from 'react-redux'\nimport bindActionCreators from '../utils/bindActionCreators';\nimport getUuid from '../utils/uuid';\nimport getOptions from '../utils/getOptions';\n\n\n// redux\n// --------------------------------------------------------","ctx":false},{"tags":[{"type":"function","string":"action","html":"<p>action</p>"},{"type":"example","string":"**数据型action**\n```js\nlet action = ()=>{\n  return {\n    type: 'type',\n    ......\n  }\n}\n```\n**动作型action**\n```js\nlet action = (args)=>(app)=>{\n  ......\n}\n```","html":"<p><strong>数据型action</strong></p>\n<pre><code class=\"lang-js\">let action = ()=&gt;{\n  return {\n    type: 'type',\n    ......\n  }\n}\n</code></pre>\n<p><strong>动作型action</strong></p>\n<pre><code class=\"lang-js\">let action = (args)=&gt;(app)=&gt;{\n  ......\n}\n</code></pre>"}],"description":{"full":"<p>action 在bnorth 中分为数据型action 函数和动作型action 函数<br />\n数据型action 函数需要返回一个对象，对象必须包含type 属性，作为reduxer 处理的分发标志<br />\n动作型action 函数需要返回一个闭包函数，在分发时会直接运行</p>","summary":"<p>action 在bnorth 中分为数据型action 函数和动作型action 函数<br />\n数据型action 函数需要返回一个对象，对象必须包含type 属性，作为reduxer 处理的分发标志<br />\n动作型action 函数需要返回一个闭包函数，在分发时会直接运行</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":17,"codeStart":39},{"tags":[{"type":"function","string":"reduxer","html":"<p>reduxer</p>"},{"type":"example","string":"```js\nlet redux = function( state, action ) {\n  if(action.type==='type')\n    ...... // 对state 数据进行操作\n  return state;\n}\n```","html":"<pre><code class=\"lang-js\">let redux = function( state, action ) {\n  if(action.type==='type')\n    ...... // 对state 数据进行操作\n  return state;\n}\n</code></pre>"}],"description":{"full":"<p>reduxer 是redux 数据仓库的处理器，处理数据型action 返回处理后的仓库数据，多个reduxer 可以将数据仓库分割管理</p>","summary":"<p>reduxer 是redux 数据仓库的处理器，处理数据型action 返回处理后的仓库数据，多个reduxer 可以将数据仓库分割管理</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":40,"codeStart":52},{"tags":[{"type":"class","string":"ActionState","html":"<p>ActionState</p>"}],"description":{"full":"<p>ActionState 是数据的管理器的基类，用来代替react state 和redux 的connect<br />\n管理器的创建函数放在app.actionStates 中，比如页面数据管理器 data 等<br />\n数据管理器被添加到container 的states 中，通过数据管理器操作数据，将引起container 对应的page 属性改变和页面刷新<br />\n编写新的数据管理器</p>\n<ol>\n<li>建立class</li>\n<li>实现state 函数，该函数返回的数据将会被映射到props.state_{name}</li>\n<li>实现states 函数，该返回对象，对象中的每个键值对的值将被逐一映射到 props.state_{name}_{key}</li>\n<li>根据需要实现页面生命周期函数的回调函数</li>\n</ol>","summary":"<p>ActionState 是数据的管理器的基类，用来代替react state 和redux 的connect<br />\n管理器的创建函数放在app.actionStates 中，比如页面数据管理器 data 等<br />\n数据管理器被添加到container 的states 中，通过数据管理器操作数据，将引起container 对应的page 属性改变和页面刷新<br />\n编写新的数据管理器</p>\n<ol>\n<li>建立class</li>\n<li>实现state 函数，该函数返回的数据将会被映射到props.state_{name}</li>\n<li>实现states 函数，该返回对象，对象中的每个键值对的值将被逐一映射到 props.state_{name}_{key}</li>\n<li>根据需要实现页面生命周期函数的回调函数</li>\n</ol>","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":false,"line":53,"codeStart":64,"code":"export class ActionState{\n  static maps = {};\n\n  static getClassName(claxx) {\n    return claxx&&(claxx.stateName||claxx.name);\n  }\n\n  static getInstance(claxx,uuid) {\n    let className = ActionState.getClassName(claxx);\n    let maps = ActionState.maps[className];\n    return maps && maps[uuid];\n  }\n\n  static deleteInstance(claxx, uuid) {\n    let className = ActionState.getClassName(claxx);\n    let maps = ActionState.maps[className];\n\n    delete maps[uuid];\n  }\n\n  static instance(claxx,app,uuid,options) {\n    uuid = uuid||getUuid();\n    let className = ActionState.getClassName(claxx);\n\n    if(!ActionState.maps[className]) ActionState.maps[className] = {};\n    let instance = ActionState.maps[className][uuid] || new claxx(app, uuid, getOptions(options));\n    instance.className = className;\n    ActionState.maps[className][uuid] = instance;\n    return instance;\n  }\n\n  constructor(app, uuid){\n    this.name='';\n    this.displayName = '';\n    this.app = app;\n    this.uuid = uuid;\n  }\n\n  get state() { \n    return null;\n  }\n\n  get states() { \n    return null;\n  }\n\n  trigger(event, ...args) {\n    let handler = this[event];\n    if(!handler) return false;\n    let title = `state event(${event}-${this.className}-${this.name}-${this.displayName}):`;\n    try{\n      this.app.verbose(title, ...args);\n      return handler.apply(this, args);\n    }catch(e){\n      this.app.error('state handler', e); \n      this.app.errorNotice(e);\n    }\n  }\n}\n\n\n// container\n// --------------------------------------------------------","ctx":{"type":"class","constructor":"ActionState","cons":"ActionState","name":"ActionState","extends":"","string":"new ActionState()"}},{"tags":[{"type":"class","string":"BaseContainer","html":"<p>BaseContainer</p>"}],"description":{"full":"<p>页面container 的基类，即页面的容器类，负责页面的逻辑部分<br /></p>","summary":"<p>页面container 的基类，即页面的容器类，负责页面的逻辑部分<br /></p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":false,"line":127,"codeStart":131,"code":"export class BaseContainer{\n  static maps = {};","ctx":{"type":"class","constructor":"BaseContainer","cons":"BaseContainer","name":"BaseContainer","extends":"","string":"new BaseContainer()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"static","string":"","html":""},{"type":"param","string":"{App} app - instance of App class","name":"app","description":"<ul>\n<li>instance of App class</li>\n</ul>","types":["App"],"typesDescription":"<a href=\"App.html\">App</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{object} props - props for page component","name":"props","description":"<ul>\n<li>props for page component</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{function} containerCreator - the container creator function","name":"containerCreator","description":"<ul>\n<li>the container creator function</li>\n</ul>","types":["function"],"typesDescription":"<code>function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"callback","string":"cb","html":"<p>cb</p>"}],"description":{"full":"<p>建立或者获取container 的单实例</p>","summary":"<p>建立或者获取container 的单实例</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":134,"codeStart":143,"code":"static instance(app, props, containerCreator, cb) {\n  let key = 'ck';\n  for(let route of props.routes){\n    if(route.path) { key+='-'+route.path }\n    if(route===props.route) { break; }\n  }\n  let container = BaseContainer.maps[key];\n\n  if(!container){\n    container = new BaseContainer(key);\n    if(typeof containerCreator === 'function') {\n      try{\n        containerCreator(app, props, container);\n        Object.entries(container.states||{}).forEach(([k,v])=>v&&(v.name=k))\n      }catch(e){\n        app.error(e);\n        app.errorRender(e,'container error');\n      }\n      BaseContainer.maps[key] = container;\n    }\n    cb&&cb(container);\n  }\n\n  return container;\n}","ctx":{"type":"method","constructor":"BaseContainer","cons":"BaseContainer","name":"instance","string":"BaseContainer.instance()"}},{"tags":[{"type":"constructor","string":"```js\nexport default function(app, props, container) {\n  container.states.data = app.actionStates.data({});\n  container.actions.test = ()=>()=>{};\n  container.handler.onStart = ()=>{};\n}\n```","html":"<pre><code class=\"lang-js\">export default function(app, props, container) {\n  container.states.data = app.actionStates.data({});\n  container.actions.test = ()=&gt;()=&gt;{};\n  container.handler.onStart = ()=&gt;{};\n}\n</code></pre>"}],"description":{"full":"<p>container 是工厂创建模式，不能直接实例化，而是设计containerCreator ，并设为route 的container 参数，之后app 会通过containerConnect，创建并连接到page</p>","summary":"<p>container 是工厂创建模式，不能直接实例化，而是设计containerCreator ，并设为route 的container 参数，之后app 会通过containerConnect，创建并连接到page</p>","body":""},"isPrivate":false,"isConstructor":true,"isClass":false,"isEvent":false,"ignore":false,"line":169,"codeStart":180,"code":"constructor(key, name) {","ctx":{"type":"constructor","constructor":"BaseContainer","cons":"BaseContainer","name":"constructor","string":"BaseContainer.prototype.constructor()"}},{"tags":[{"type":"property","string":"{string} key - container unique key","name":"key","description":"<ul>\n<li>container unique key</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":181,"codeStart":184,"code":"this.key = key;","ctx":{"type":"property","receiver":"this","name":"key","value":"key","string":"this.key"}},{"tags":[{"type":"property","string":"{string} name - container display name, ues key as name if no name param","name":"name","description":"<ul>\n<li>container display name, ues key as name if no name param</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":186,"codeStart":189,"code":"this.name = name;","ctx":{"type":"property","receiver":"this","name":"name","value":"name","string":"this.name"}},{"tags":[{"type":"property","string":"{actionState[]} states - state 列表<br />\nstate 的建立\n```js\ncontainer.states.data = app.actionStates.data({});\n```\nstate 的数据访问\n```js\nthis.props.state_data\n```\nstate 管理器的访问\n```js\nthis.props.states.data      // 在页面Page 中\ncontainer.props.states.data // 在页面container function 中\n```","name":"states","description":"<ul>\n<li>state 列表<br /> state 的建立</li>\n</ul>\n<pre><code class=\"lang-js\">container.states.data = app.actionStates.data({});\n</code></pre>\n<p>state 的数据访问</p>\n<pre><code class=\"lang-js\">this.props.state_data\n</code></pre>\n<p>state 管理器的访问</p>\n<pre><code class=\"lang-js\">this.props.states.data      // 在页面Page 中\ncontainer.props.states.data // 在页面container function 中\n</code></pre>","types":["Array.<actionState>"],"typesDescription":"<code>Array</code>.&lt;<a href=\"actionState.html\">actionState</a>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":191,"codeStart":208,"code":"this.states = {\n  data: app.actionStates.data&&app.actionStates.data({}),\n  _page: app.actionStates.data({initData:{\n    layers: [],\n  }}), \n};","ctx":{"type":"property","receiver":"this","name":"states","value":"{","string":"this.states"}},{"tags":[{"type":"property","string":"{string[]} reduxers - reduxer 映射列表，将redux 仓库中的对应名字的数据映射到页面props 中。","name":"reduxers","description":"<ul>\n<li>reduxer 映射列表，将redux 仓库中的对应名字的数据映射到页面props 中。</li>\n</ul>","types":["Array.<string>"],"typesDescription":"<code>Array</code>.&lt;<code>string</code>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":215,"codeStart":218,"code":"this.reducers = {};","ctx":{"type":"property","receiver":"this","name":"reducers","value":"{}","string":"this.reducers"}},{"tags":[{"type":"property","string":"{action[]} actions - action 函数列表<br />\n定义\n```js\ncontainer.actions.test = (args)=>()=>{\n  ...\n};\n```\n页面Page 中使用\n```js\nthis.props.container.actions.test(args)\n```","name":"actions","description":"<ul>\n<li>action 函数列表<br /> 定义</li>\n</ul>\n<pre><code class=\"lang-js\">container.actions.test = (args)=&gt;()=&gt;{\n  ...\n};\n</code></pre>\n<p>页面Page 中使用</p>\n<pre><code class=\"lang-js\">this.props.container.actions.test(args)\n</code></pre>","types":["Array.<action>"],"typesDescription":"<code>Array</code>.&lt;<a href=\"action.html\">action</a>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":220,"codeStart":233,"code":"this.actions = {};","ctx":{"type":"property","receiver":"this","name":"actions","value":"{}","string":"this.actions"}},{"tags":[{"type":"property","string":"{function[]} handlers - 事件处理函数列表，事件包括:<br />\napp 事件 -  app 事件\n用户事件 - 通过app.trigger 函数发送的自定义事件\nonWillStart(page) - 页面将要启动时触发，参数page 为页面Page 实例\nonStart(page) - 页面启动时触发，参数page 为页面Page 实例\nonPause(page) - 页面失去焦点启动时触发，参数page 为页面Page 实例\nonResume(page) - 页面获取焦点时触发，参数page 为页面Page 实例\nonStop(page) - 页面关闭时触发，参数page 为页面Page 实例","name":"handlers","description":"<ul>\n<li>事件处理函数列表，事件包括:<br /> app 事件 -  app 事件<br />\n用户事件 - 通过app.trigger 函数发送的自定义事件<br />\nonWillStart(page) - 页面将要启动时触发，参数page 为页面Page 实例<br />\nonStart(page) - 页面启动时触发，参数page 为页面Page 实例<br />\nonPause(page) - 页面失去焦点启动时触发，参数page 为页面Page 实例<br />\nonResume(page) - 页面获取焦点时触发，参数page 为页面Page 实例<br />\nonStop(page) - 页面关闭时触发，参数page 为页面Page 实例</li>\n</ul>","types":["Array.<function>"],"typesDescription":"<code>Array</code>.&lt;<code>function</code>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":235,"codeStart":245,"code":"this.handlers = {};\n  }","ctx":{"type":"property","receiver":"this","name":"handlers","value":"{}","string":"this.handlers"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{string} event  - 事件名称","name":"event","description":"<ul>\n<li>事件名称</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{...*} [args] - 事件参数","name":"[args]","description":"<ul>\n<li>事件参数</li>\n</ul>","types":[],"typesDescription":"<code>*</code>","optional":true,"nullable":false,"nonNullable":false,"variable":true}],"description":{"full":"<p>触发container 事件处理</p>","summary":"<p>触发container 事件处理</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":248,"codeStart":254,"code":"trigger(event, ...args) {\n  let handler = this.handlers[event];\n  if(!handler) return false;\n  let title = `container handler(${event}-${this.name||''}):`;\n  try{\n    app.verbose(title, ...args);\n    handler(...args);\n  }catch(e){\n    this.error(title, e); \n    app.errorNotice(e);\n  }\n}","ctx":{"type":"method","name":"trigger","string":"trigger()"}},{"tags":[{"type":"method","string":"","html":""}],"description":{"full":"<p>清除container</p>","summary":"<p>清除container</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":267,"codeStart":271,"code":"clear() {\n  delete BaseContainer.maps[this.key];\n}\n}","ctx":{"type":"method","name":"clear","string":"clear()"}},{"tags":[{"type":"function","string":"containerCreator","html":"<p>containerCreator</p>"},{"type":"param","string":"{App} app - instance of App class","name":"app","description":"<ul>\n<li>instance of App class</li>\n</ul>","types":["App"],"typesDescription":"<a href=\"App.html\">App</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{object} props - instance of App class","name":"props","description":"<ul>\n<li>instance of App class</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{BaseContainer} container - instance of App class","name":"container","description":"<ul>\n<li>instance of App class</li>\n</ul>","types":["BaseContainer"],"typesDescription":"<a href=\"BaseContainer.html\">BaseContainer</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"example","string":"```js\nexport default function(app, props, container) {\n  container.states.data = app.actionStates.data({});\n}\n```","html":"<pre><code class=\"lang-js\">export default function(app, props, container) {\n  container.states.data = app.actionStates.data({});\n}\n</code></pre>"}],"description":{"full":"<p>container 生成函数，用户通过该函数，完成对container 的扩展与定制，实现业务逻辑</p>","summary":"<p>container 生成函数，用户通过该函数，完成对container 的扩展与定制，实现业务逻辑</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":277,"codeStart":291},{"tags":[{"type":"function","string":"containerConnect","html":"<p>containerConnect</p>"},{"type":"param","string":"{App} app - instance of App class","name":"app","description":"<ul>\n<li>instance of App class</li>\n</ul>","types":["App"],"typesDescription":"<a href=\"App.html\">App</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{function|array} containerCreator - container creator function<br />\n**function**: 将函数视为container 生成函数\n**array**: 如果参数为数组，数组中的元素会按顺序，作为[react-redux](https://github.com/reactjs/react-redux) 的connect 函数参数，使用redux 实现container","name":"containerCreator","description":"<ul>\n<li>container creator function<br /> <strong>function</strong>: 将函数视为container 生成函数<br />\n<strong>array</strong>: 如果参数为数组，数组中的元素会按顺序，作为<a href=\"https://github.com/reactjs/react-redux\">react-redux</a> 的connect 函数参数，使用redux 实现container</li>\n</ul>","types":["function","array"],"typesDescription":"<code>function</code>|<code>array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>container 连接函数，负责通过container 生成器转换出高阶组件，实现页面的逻辑</p>","summary":"<p>container 连接函数，负责通过container 生成器转换出高阶组件，实现页面的逻辑</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":292,"codeStart":300,"code":"export function containerConnect(app, containerCreator) {\n  if(Array.isArray(containerCreator)) return connect(...containerCreator);\n\n  let mapState = (state, props)=>{\n    let container = BaseContainer.instance(app, props, containerCreator, (container)=>{\n      container.actions = bindActionCreators(container.actions, app.actionStore.dispatch);\n    });\n\n    let ret = {};\n    if(!container) return ret;\n    Object.entries(container.reducers||{}).forEach(([key,v])=>{\n      if(v===true)ret[\"state_\"+key] = state[v===true?key:v];\n    });\n    Object.entries(container.states||{}).forEach(([key,v])=>{\n      ret[\"state_\"+key] = v.state;\n      for(let [skey, val] of Object.entries(v.states||{})){\n        ret[`state_${key}_${skey}`] = val;\n      }\n    });\n    return ret;\n  }\n\n  let mapDispatch = (dispatch, props)=>{\n    let container = BaseContainer.instance(app, props, containerCreator);\n    if(!container) return {app};\n\n    return {\n      app,\n      container,\n      states: container.states,\n\n      onWillStart(page) {\n        container.displayName = page.getDisplayName();\n        container.trigger('onWillStart', page);\n        Object.entries(container.states||{}).forEach(([k,v])=>v.displayName = page.getDisplayName());\n      },\n      onStart(page) {\n        container.trigger('onStart', page);\n        Object.entries(container.states||{}).forEach(([k,v])=>v.trigger('onStart'));\n      },\n      onResume(page) {\n        container.trigger('onResume', page);\n        Object.entries(container.states||{}).forEach(([k,v])=>v.trigger('onResume'));\n      },\n      onPause(page) {\n        container.trigger('onPause', page);\n        Object.entries(container.states||{}).forEach(([k,v])=>v.trigger('onPause'));\n      },\n      onStop(page) {\n        container.clear(props, containerCreator);\n        container.trigger('onStop', page);\n        Object.entries(container.states||{}).forEach(([k,v])=>v.trigger('onStop'));\n      }\n    }\n  }\n\n  return connect(mapState, mapDispatch);\n}","ctx":{"type":"function","name":"containerConnect","string":"containerConnect()"}}]
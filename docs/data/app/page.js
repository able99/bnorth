[{"tags":[{"type":"copyright","string":"(c) 2016 able99","html":"<p>(c) 2016 able99</p>"},{"type":"author","string":"able99 (8846755@qq.com)","html":"<p>able99 (8846755@qq.com)</p>"},{"type":"license","string":"MIT","html":"<p>MIT</p>"}],"description":{"full":"<p>bnorth solution</p>","summary":"<p>bnorth solution</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1,"codeStart":9,"code":"import React from 'react';\nimport uuid from '../utils/uuid';\nimport { setBrowserTitle } from '../utils/browser';","ctx":false},{"tags":[{"type":"class","string":"Page","html":"<p>Page</p>"},{"type":"property","string":"{App} app - App 实例","name":"app","description":"<ul>\n<li>App 实例</li>\n</ul>","types":["App"],"typesDescription":"<a href=\"App.html\">App</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{container} props.container - page 对应的container","name":"props.container","description":"<ul>\n<li>page 对应的container</li>\n</ul>","types":["container"],"typesDescription":"<a href=\"container.html\">container</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{object} props.state_xxx - container 中states 映射到props 上的数据","name":"props.state_xxx","description":"<ul>\n<li>container 中states 映射到props 上的数据</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{object} props.params - 页面参数对象，对应path-info 形式的参数","name":"props.params","description":"<ul>\n<li>页面参数对象，对应path-info 形式的参数</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{location} props.location - 当前路径信息","name":"props.location","description":"<ul>\n<li>当前路径信息</li>\n</ul>","types":["location"],"typesDescription":"<a href=\"location.html\">location</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{Route} props.route - 当前路由信息","name":"props.route","description":"<ul>\n<li>当前路由信息</li>\n</ul>","types":["Route"],"typesDescription":"<a href=\"Route.html\">Route</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{Route[]} props.routes - 当前路径对应的全部路由","name":"props.routes","description":"<ul>\n<li>当前路径对应的全部路由</li>\n</ul>","types":["Array.<Route>"],"typesDescription":"<code>Array</code>.&lt;<a href=\"Route.html\">Route</a>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{router} props.router - router","name":"props.router","description":"<ul>\n<li>router</li>\n</ul>","types":["router"],"typesDescription":"<a href=\"router.html\">router</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>页面Page 组件的超类，页面element 组件会被pageHoc 函数给超类化<br />\n多页面时页面嵌套层次关系如下：<br />\n路由层次</p>\n<pre><code class=\"lang-js\">root\n  A\n    B\n</code></pre>\n<p>实际显示</p>\n<pre><code class=\"lang-js\">&lt;div data-wrap=&quot;root&quot;&gt;\n  &lt;div&gt;{root}&lt;/div&gt;\n  &lt;div data-wrap=&quot;A&quot;&gt;\n    &lt;div&gt;{A}&lt;/div&gt;\n    &lt;div data-wrap=&quot;B&quot;&gt;\n      {B}\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>","summary":"<p>页面Page 组件的超类，页面element 组件会被pageHoc 函数给超类化<br />\n多页面时页面嵌套层次关系如下：<br />\n路由层次</p>\n<pre><code class=\"lang-js\">root\n  A\n    B\n</code></pre>\n<p>实际显示</p>\n<pre><code class=\"lang-js\">&lt;div data-wrap=&quot;root&quot;&gt;\n  &lt;div&gt;{root}&lt;/div&gt;\n  &lt;div data-wrap=&quot;A&quot;&gt;\n    &lt;div&gt;{A}&lt;/div&gt;\n    &lt;div data-wrap=&quot;B&quot;&gt;\n      {B}\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":false,"line":14,"codeStart":45,"code":"export default (app, Wrapper) => class extends Wrapper {\n  constructor(props) {\n    super(props);\n    this.app = app;\n    this._focus = false;\n  }\n\n  componentWillMount() {\n    app.addPage(this);\n    if(this.props.onWillStart) this.props.onWillStart(this);\n    return super.componentWillMount && super.componentWillMount();\n  }\n\n  componentDidMount() {\n    if(this.props.onStart) this.props.onStart(this);\n    if(this.checkFocusChange()){this.componentDidResume();}\n    return super.componentDidMount && super.componentDidMount();\n  }\n\n  componentDidUpdate(prevProps) {\n    if(this.checkFocusChange()){\n      if(this.isFocus()){\n        this.componentDidResume();\n      }else{\n        this.componentDidPause();\n      }\n    }\n\n    return super.componentDidUpdate && super.componentDidUpdate();\n  }\n\n  componentWillUnmount() {\n    this.componentDidPause();\n\n    if(this.props.onStop) this.props.onStop(this);\n    let ret = super.componentWillUnmount && super.componentWillUnmount();\n\n    app.removePage(this);\n    return ret;\n  }\n\n  componentDidPause() {\n    if(this.props.onPause) this.props.onPause(this);\n    return super.componentDidPause && super.componentDidPause();\n  }\n\n  componentDidResume() {\n    setBrowserTitle(this.props.route.title||app.config.browser.title);\n    if(this.props.onResume) this.props.onResume(this);\n    return super.componentDidResume && super.componentDidResume();\n  }\n\n  componentDidBackKey() {\n    if(this.props.onBackKey) this.props.onBackKey(this);\n    return super.componentDidBackKey && super.componentDidBackKey();\n  }\n\n  componentDidCatch(error, info) {\n    return app.trigger('onErrorPageRender', error);\n    return super.componentDidCatch && super.componentDidCatch(error, info);\n  }\n\n  render(){\n    app.verbose(`page render(${this.getDisplayName()}):`,this);\n    \n    if(this.props.state__page && this.props.state__page.ready===false){\n      return <app._WaittingComponent />;\n    }\n\n    let ret;\n    try{\n      ret = super.render();\n    }catch(e){\n      return app.trigger('onErrorPageRender', e);\n    }\n    ret = React.cloneElement( ret, Object.assign( {\n      'data-bnorth-page': this.getDisplayName(), \n      'data-blur': !this.isFocus(),\n    }, ret.props));\n    \n    return (\n      <div data-bnorth-wrap={this.getDisplayName()} style={{position: 'absolute', left: 0, right: 0, top: 0, bottom: 0, width: '100%', height: '100%'}}>\n        {ret}\n        {this.props.state__page&&!this.isAppPage()?this.props.state__page.layers.map(v=>v.element):null}\n        {this.getSubs().indexOf(this.getPageChildPath())>=0 && this.props[this.getPageChildPath()] && this.props[this.getPageChildPath()].props.children}\n        {this.getSubs().indexOf(this.getPageChildPath())<0 && !this.isSubPage() && this.props.children}\n        {this.props.state__page&&this.isAppPage()?this.props.state__page.layers.map(v=>v.element):null}\n      </div>\n    )\n  }","ctx":false},{"tags":[{"type":"method","string":"","html":""}],"description":{"full":"<p>返回page 的display 名称</p>","summary":"<p>返回page 的display 名称</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":136,"codeStart":140,"code":"getDisplayName() {\n  return Wrapper.displayName||Wrapper.name;\n}","ctx":{"type":"method","name":"getDisplayName","string":"getDisplayName()"}},{"tags":[{"type":"method","string":"","html":""}],"description":{"full":"<p>返回是否是App 根组件</p>","summary":"<p>返回是否是App 根组件</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":true,"line":143,"codeStart":147,"code":"isAppPage() {\n  return this.props.routes[0]===this.props.route;\n}\n\ncheckFocusChange() {\n  let oldFocus = this._focus;\n  this._focus = this.isFocus();\n  return this._focus !== oldFocus;\n}","ctx":{"type":"method","name":"isAppPage","string":"isAppPage()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"return","string":"{boolean}","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{boolean}</p>"}],"description":{"full":"<p>返回是否页面在顶层</p>","summary":"<p>返回是否页面在顶层</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":157,"codeStart":162,"code":"isFocus() {\n  if(this.getSubs().hasOwnProperty(this.getPageChildPath())){\n    return !Boolean(this.props[this.getPageChildPath()] && this.props[this.getPageChildPath()].props.children);\n  }else{\n    return !Boolean(this.props.children);\n  }\n}","ctx":{"type":"method","name":"isFocus","string":"isFocus()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"return","string":"{boolean}","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{boolean}</p>"}],"description":{"full":"<p>返回是否是容器组件</p>","summary":"<p>返回是否是容器组件</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":170,"codeStart":175,"code":"isContainer() {\n  return (this.props.route.childRoutes||[]).find((v)=>{\n    return v.components;\n  });\n}","ctx":{"type":"method","name":"isContainer","string":"isContainer()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"return","string":"{array} - 子组件的名称数组","types":["array"],"typesDescription":"<code>array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li>子组件的名称数组</li>\n</ul>"}],"description":{"full":"<p>容器组件返回其子组件列表</p>","summary":"<p>容器组件返回其子组件列表</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":181,"codeStart":186,"code":"getSubs() {\n  return (this.props.route.childRoutes||[])\n  .filter((v)=>{\n    return v.components;\n  })\n  .map((v)=>{\n    return v.path;\n  });\n}","ctx":{"type":"method","name":"getSubs","string":"getSubs()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"return","string":"{boolean}","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{boolean}</p>"}],"description":{"full":"<p>是否是子组件</p>","summary":"<p>是否是子组件</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":196,"codeStart":201,"code":"isSubPage() {\n  return Boolean(this.props.route.components);\n}","ctx":{"type":"method","name":"isSubPage","string":"isSubPage()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"return","string":"{string}","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{string}</p>"}],"description":{"full":"<p>返回当前页面的全路径</p>","summary":"<p>返回当前页面的全路径</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":205,"codeStart":210,"code":"getPageFullPath() {\n  let routes = [];\n  for(let route of this.props.routes){\n    if(!route.path) continue;\n    routes.push(route.path===\"/\"?\"\":route.path);\n    if(route===this.props.route) break;\n  }\n  let pathname = routes.join(\"/\");\n  for (let key in this.props.router.params) {\n    let re = new RegExp(\":\"+key,\"g\"); \n    pathname = pathname.replace(re,this.props.router.params[key]);\n  }\n  return pathname;\n}","ctx":{"type":"method","name":"getPageFullPath","string":"getPageFullPath()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"return","string":"{string}","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{string}</p>"}],"description":{"full":"<p>容器组件返回当前显示中的子组件路径</p>","summary":"<p>容器组件返回当前显示中的子组件路径</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":225,"codeStart":230,"code":"getPageChildPath() {\n  let ret = null;\n  for(let i=0; i<this.props.routes.length; i++){\n    let route = this.props.routes[i];\n    if(!route.path) continue;\n    if(route===this.props.route) {\n      ret = this.props.routes[i+1];\n      break;\n    }\n  }\n  return ret?ret.path:null;\n}","ctx":{"type":"method","name":"getPageChildPath","string":"getPageChildPath()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"return","string":"{string}","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{string}</p>"}],"description":{"full":"<p>子组件返回其容器组件的路径</p>","summary":"<p>子组件返回其容器组件的路径</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":243,"codeStart":248,"code":"getPageParentPath() {\n  let ret = null;\n  for(let i=0; i<this.props.routes.length; i++){\n    let route = this.props.routes[i];\n    if(!route.path) continue;\n    if(route===this.props.route) break;\n    ret = route.path;\n  }\n  return ret\n}\n\naddLayer(element) {\n  let uuidstr = uuid(8,16);\n  this.props.container.states._page.update({\n    layers: [...this.props.state__page.layers, {uuid: uuidstr, element}]\n  });\n\n  return uuidstr;\n}\n\nupdateLayer(element, uuid) {\n  this.props.container.states._page.update({\n    layers: this.props.state__page.layers.map(v=>(\n      v.uuid!==uuid?v:{element, uuid}\n    )),\n  });\n}\n\nremoveLayer(uuid) {\n  this.props.container.states._page.update({\n    layers: this.props.state__page.layers.filter(v=>v.uuid!==uuid)\n  });\n}\n}","ctx":{"type":"method","name":"getPageParentPath","string":"getPageParentPath()"}},{"tags":[{"type":"function","string":"pageHoc","html":"<p>pageHoc</p>"},{"type":"param","string":"{!App} app - App 的实例","name":"app","description":"<ul>\n<li>App 的实例</li>\n</ul>","types":["App"],"typesDescription":"!<a href=\"App.html\">App</a>","optional":false,"nullable":false,"nonNullable":true,"variable":false},{"type":"param","string":"{!element} element - 进行页面化转换的react 有状态组件","name":"element","description":"<ul>\n<li>进行页面化转换的react 有状态组件</li>\n</ul>","types":["element"],"typesDescription":"!<code>element</code>","optional":false,"nullable":false,"nonNullable":true,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":283,"codeStart":288}]
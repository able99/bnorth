[{"tags":[{"type":"copyright","string":"(c) 2016 able99","html":"<p>(c) 2016 able99</p>"},{"type":"author","string":"able99 (8846755@qq.com)","html":"<p>able99 (8846755@qq.com)</p>"},{"type":"license","string":"MIT","html":"<p>MIT</p>"}],"description":{"full":"<p>bnorth solution</p>","summary":"<p>bnorth solution</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1,"codeStart":7},{"tags":[{"type":"module","string":"router","html":"<p>router</p>"}],"description":{"full":"<p>router 模块完全来至于<a href=\"https://github.com/ReactTraining/react-router/tree/v3/docs\">react-router 3</a>，并扩展了route 组件的属性<br />\nRouter,Route,hashHistory,RouterContext,etc...</p>","summary":"<p>router 模块完全来至于<a href=\"https://github.com/ReactTraining/react-router/tree/v3/docs\">react-router 3</a>，并扩展了route 组件的属性<br />\nRouter,Route,hashHistory,RouterContext,etc...</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":8,"codeStart":13},{"tags":[{"type":"class","string":"location","html":"<p>location</p>"},{"type":"property","string":"{string} action - 当前地址进入方式，POP|PUSH","name":"action","description":"<ul>\n<li>当前地址进入方式，POP|PUSH</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{string} pathname - 当前地址的路径名","name":"pathname","description":"<ul>\n<li>当前地址的路径名</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{object} query - 当前地址对应的query 对象","name":"query","description":"<ul>\n<li>当前地址对应的query 对象</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{string} hash - 当前地址的hash 字符串","name":"hash","description":"<ul>\n<li>当前地址的hash 字符串</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{string} search - 当前地址的search 字符串","name":"search","description":"<ul>\n<li>当前地址的search 字符串</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{string} key - 当前地址state 信息的key 值","name":"key","description":"<ul>\n<li>当前地址state 信息的key 值</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{object} state - 当前地址的state 对象","name":"state","description":"<ul>\n<li>当前地址的state 对象</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":false,"line":14,"codeStart":24},{"tags":[{"type":"class","string":"router","html":"<p>router</p>"}],"description":{"full":"<p>react router</p>","summary":"<p>react router</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":false,"line":25,"codeStart":29},{"tags":[{"type":"class","string":"Route","html":"<p>Route</p>"},{"type":"example","string":"```js\n<Route \n  key=\"order\" \n  page={require('pages/order')}\n  container={require('pages/_order')} />\n```","html":"<pre><code class=\"lang-js\">&lt;Route \n  key=&quot;order&quot; \n  page={require('pages/order')}\n  container={require('pages/_order')} /&gt;\n</code></pre>"}],"description":{"full":"<p>配置路由信息组件</p>","summary":"<p>配置路由信息组件</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":false,"line":30,"codeStart":41},{"tags":[{"type":"property","string":"{!string} key - 组件主键","name":"key","description":"<ul>\n<li>组件主键</li>\n</ul>","types":["string"],"typesDescription":"!<code>string</code>","optional":false,"nullable":false,"nonNullable":true,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":42,"codeStart":45},{"tags":[{"type":"property","string":"{string} [path=null] - 路由的匹配路径，如果设置为空将从key 属性智能获取\n```js\nAAA - 匹配路径AAA\nAAA/:id - 匹配路径AAA/xxx，匹配带xxx参数的AAA\n````","name":"[path=null]","description":"<ul>\n<li>路由的匹配路径，如果设置为空将从key 属性智能获取 ```js<br />\nAAA - 匹配路径AAA<br />\nAAA/:id - 匹配路径AAA/xxx，匹配带xxx参数的AAA</li>\n</ul>\n<pre><code></code></pre>","types":["string"],"typesDescription":"<code>string</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":46,"codeStart":53},{"tags":[{"type":"property","string":"{string} [pathname=null] - 设置到config.paths 中的名称，如果不指定则从path或者key中智能获取，比如key='order/:id',则pathname 为order","name":"[pathname=null]","description":"<ul>\n<li>设置到config.paths 中的名称，如果不指定则从path或者key中智能获取，比如key='order/:id',则pathname 为order</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"default","string":"null","html":"<p>null</p>"}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":54,"codeStart":58},{"tags":[{"type":"property","string":"{element} component - component参数会自动进行pageHoc 高阶函数转换","name":"component","description":"<ul>\n<li>component参数会自动进行pageHoc 高阶函数转换</li>\n</ul>","types":["element"],"typesDescription":"<code>element</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":59,"codeStart":62},{"tags":[{"type":"property","string":"{containerCreator} [container=null] contianer参数会自动进行containerHoc 高阶函数转换","name":"[container=null]","description":"<p>contianer参数会自动进行containerHoc 高阶函数转换</p>","types":["containerCreator"],"typesDescription":"<a href=\"containerCreator.html\">containerCreator</a>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":63,"codeStart":66},{"tags":[{"type":"callback","string":"getComponent","html":"<p>getComponent</p>"},{"type":"param","string":"{object} nextState - 页面属性","name":"nextState","description":"<ul>\n<li>页面属性</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{function} callback - 页面加载完成后，通过函数返回","name":"callback","description":"<ul>\n<li>页面加载完成后，通过函数返回</li>\n</ul>","types":["function"],"typesDescription":"<code>function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"example","string":"```js\n<Route path=\"xxx\" getComponent={(nextState, cb) => {\n  require.ensure([], function() {\n    let page = require(xxx);\n    let container = require(xxx);\n    cb(null, createRouteComponent(page, container))\n  })\n}} />\n```","html":"<pre><code class=\"lang-js\">&lt;Route path=&quot;xxx&quot; getComponent={(nextState, cb) =&gt; {\n  require.ensure([], function() {\n    let page = require(xxx);\n    let container = require(xxx);\n    cb(null, createRouteComponent(page, container))\n  })\n}} /&gt;\n</code></pre>"}],"description":{"full":"<p>动态加载页面组件时的回调函数</p>","summary":"<p>动态加载页面组件时的回调函数</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":67,"codeStart":83},{"tags":[{"type":"property","string":"{object} components 组件组，具体参见react router\n```js\n<Route path=\"groups\" components={{main: Groups, sidebar: GroupsSidebar}} />\n```","name":"components","description":"<p>组件组，具体参见react router ```js<br />\n&lt;Route path=&quot;groups&quot; components={{main: Groups, sidebar: GroupsSidebar}} /&gt;</p>\n<pre><code></code></pre>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":84,"codeStart":90},{"tags":[{"type":"callback","string":"getComponents","html":"<p>getComponents</p>"}],"description":{"full":"<p>动态加载组件组，具体参见react router</p>","summary":"<p>动态加载组件组，具体参见react router</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":91,"codeStart":95},{"tags":[{"type":"callback","string":"onInit","html":"<p>onInit</p>"}],"description":{"full":"<p>根路由被加载时，被调用</p>","summary":"<p>根路由被加载时，被调用</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":96,"codeStart":100},{"tags":[{"type":"property","string":"{boolean} [checkLogin=false] - 设置后，进入页面时，如果没登录，将会跳转到登录页面","name":"[checkLogin=false]","description":"<ul>\n<li>设置后，进入页面时，如果没登录，将会跳转到登录页面</li>\n</ul>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":101,"codeStart":104},{"tags":[{"type":"property","string":"{boolean} [restartOnParamChange=false] 设置后，param 改变将引起container 重置","name":"[restartOnParamChange=false]","description":"<p>设置后，param 改变将引起container 重置</p>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":104,"codeStart":107},{"tags":[{"type":"property","string":"{boolean} [restartOnQueryChange=false] 设置后，query 改变将引起container 重置","name":"[restartOnQueryChange=false]","description":"<p>设置后，query 改变将引起container 重置</p>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":107,"codeStart":110},{"tags":[{"type":"property","string":"{string} [purpose=null] 设置后，将除pathname 外，还将设置config.paths[purpose]的路径","name":"[purpose=null]","description":"<p>设置后，将除pathname 外，还将设置config.paths[purpose]的路径</p>","types":["string"],"typesDescription":"<code>string</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":110,"codeStart":115,"code":"export * from 'react-router';","ctx":false}]
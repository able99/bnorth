[{"tags":[{"type":"copyright","string":"(c) 2016 able99","html":"<p>(c) 2016 able99</p>"},{"type":"author","string":"able99 (8846755@qq.com)","html":"<p>able99 (8846755@qq.com)</p>"},{"type":"license","string":"MIT","html":"<p>MIT</p>"}],"description":{"full":"<p>bnorth solution</p>","summary":"<p>bnorth solution</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1,"codeStart":9,"code":"import React,{cloneElement}  from 'react';\nimport { render } from 'react-dom';\nimport { bindActionCreators,combineReducers,createStore,applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport { Router,Route,hashHistory,RouterContext } from 'react-router';\nimport containerHoc from './containerHoc';\nimport pageHoc from './pageHoc';\nimport { AppComponentPage, appComponentContainer } from './appComponent';","ctx":false},{"tags":[{"type":"class","string":"pluginApp","html":"<p>pluginApp</p>"}],"description":{"full":"<p>应用的基本插件，该插件是第一个添加到应用的插件，实现了应用运行的基本功能<br />\n<strong>插件</strong> 该类为插件类扩展了App 的能力<br />\napp.actions.xxx: 若干方法</p>","summary":"<p>应用的基本插件，该插件是第一个添加到应用的插件，实现了应用运行的基本功能<br />\n<strong>插件</strong> 该类为插件类扩展了App 的能力<br />\napp.actions.xxx: 若干方法</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":false,"line":19,"codeStart":26,"code":"// app action\n//-----------------------------------------\nconst ActionAppReady = 'ActionAppReady';","ctx":false},{"tags":[{"type":"method","string":"appReady","html":"<p>appReady</p>"},{"type":"param","string":"{boolean} ready ","name":"ready","description":"","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{boolean} ready</p>"},{"type":"example","string":"```js\napp.actions.appReady(true)\n```","html":"<pre><code class=\"lang-js\">app.actions.appReady(true)\n</code></pre>"}],"description":{"full":"<p>改变app ready 状态，app ready后，会关闭waiting 动画，显示渲染的内容</p>","summary":"<p>改变app ready 状态，app ready后，会关闭waiting 动画，显示渲染的内容</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":29,"codeStart":38,"code":"let appReady = (ready)=>(app)=>{\n  app.getPage(0).props.states._page.setValue('ready',ready);\n}","ctx":{"type":"declaration","name":"appReady","value":"(ready)=>(app)=>{","string":"appReady"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{element|string} message - 消息框内容","name":"message","description":"<ul>\n<li>消息框内容</li>\n</ul>","types":["element","string"],"typesDescription":"<code>element</code>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{object} options - 参数对象，具体由实现onNoticeMessage 事件的插件所决定","name":"options","description":"<ul>\n<li>参数对象，具体由实现onNoticeMessage 事件的插件所决定</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"example","string":"```js\napp.actions.noticeMessage(message);\n```","html":"<pre><code class=\"lang-js\">app.actions.noticeMessage(message);\n</code></pre>"}],"description":{"full":"<p>显示通知内容</p>","summary":"<p>显示通知内容</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":42,"codeStart":52,"code":"let noticeMessage = (...args)=>(app)=>{\n  app.trigger('onNoticeMessage', ...args);\n}","ctx":{"type":"declaration","name":"noticeMessage","value":"(...args)=>(app)=>{","string":"noticeMessage"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{boolean} show - 是否显示，default `true`，调用几次显示，也需要调用几次隐藏","name":"show","description":"<ul>\n<li>是否显示，default <code>true</code>，调用几次显示，也需要调用几次隐藏</li>\n</ul>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{object} options - 参数对象，具体由实现onNoticeLoading 事件的插件所决定","name":"options","description":"<ul>\n<li>参数对象，具体由实现onNoticeLoading 事件的插件所决定</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"example","string":"```js\napp.actions.noticeLoading(true);","html":"<pre><code class=\"lang-js\">app.actions.noticeLoading(true);</code></pre>"}],"description":{"full":"<p>显示页面加载进度</p>","summary":"<p>显示页面加载进度</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":55,"codeStart":64,"code":"let noticeLoading = (...args)=>(app)=>{\n  app.trigger('onNoticeLoading', ...args);\n}","ctx":{"type":"declaration","name":"noticeLoading","value":"(...args)=>(app)=>{","string":"noticeLoading"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{boolean} show 是否显示，default `true`，调用几次显示，也需要调用几次隐藏","name":"show","description":"<p>是否显示，default <code>true</code>，调用几次显示，也需要调用几次隐藏</p>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{object} options Loader 属性,具体参见 [Loader 组件](../components/Loader.md)\n* @example\n```js\napp.actions.noticeBlocking(true);","name":"options","description":"<p>Loader 属性,具体参见 <a href=\"../components/Loader.md\">Loader 组件</a> * @example</p>\n<pre><code class=\"lang-js\">app.actions.noticeBlocking(true);</code></pre>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>显示阻塞操作的加载页面</p>","summary":"<p>显示阻塞操作的加载页面</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":67,"codeStart":76,"code":"let noticeBlocking = (...args)=>(app)=>{\n  app.trigger('onNoticeBlocking', ...args);\n}\n\n\n\n// funtions\n//-----------------------------------------","ctx":{"type":"declaration","name":"noticeBlocking","value":"(...args)=>(app)=>{","string":"noticeBlocking"}},{"tags":[{"type":"function","string":"","html":""},{"type":"param","string":"{App} app - App实例","name":"app","description":"<ul>\n<li>App实例</li>\n</ul>","types":["App"],"typesDescription":"<a href=\"App.html\">App</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{page} page - 页面组件","name":"page","description":"<ul>\n<li>页面组件</li>\n</ul>","types":["page"],"typesDescription":"<a href=\"page.html\">page</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{container} container - 页面容器","name":"container","description":"<ul>\n<li>页面容器</li>\n</ul>","types":["container"],"typesDescription":"<a href=\"container.html\">container</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{element} - 返回经过页面组件与页面容器高阶化后的组件","types":["element"],"typesDescription":"<code>element</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li>返回经过页面组件与页面容器高阶化后的组件</li>\n</ul>"},{"type":"example","string":"```js\ncreateRouteComponent(app, page, container);\n```","html":"<pre><code class=\"lang-js\">createRouteComponent(app, page, container);\n</code></pre>"}],"description":{"full":"<p>组合页面组件与页面容器，返回raect router使用的组件</p>","summary":"<p>组合页面组件与页面容器，返回raect router使用的组件</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":84,"codeStart":96,"code":"function createRouteComponent (app, page, container) {\n  if(!page) return null;\n  page = pageHoc(app, page);\n  container = containerHoc(app, container);\n  \n  return container?container(page):page;\n}","ctx":{"type":"function","name":"createRouteComponent","string":"createRouteComponent()"}},{"tags":[{"type":"function","string":"","html":""}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":true,"line":104,"codeStart":107,"code":"function routeProps(route, config, app) {\n  if(!route||!route.props) return route;\n  if(route.props.onInit) route.props.onInit(app);\n\n  return (function props(route){\n    return cloneElement(route,{children:React.Children.map(route.props.children,(v,i)=>{\n      let { key } = v;\n      let { path, pathname, container, component, components, children, checkLogin, restartOnParamChange, restartOnQueryChange, onEnter, purpose } = v.props;\n\n      // path and path param\n      if(path||!key){ path = path===true||!key?'':path; }else{ path = key; }\n      let paths = path.split('/');\n      let params = paths.filter((v)=>{return v.indexOf(':')===0}).map((v)=>{return v.slice(1)});\n      pathname = (pathname||paths[0]||paths[1]||'');\n\n      // navi path\n      let pathItem = {path:pathname, params};\n      config.paths[pathname.replace(/-/g,'_')] = pathItem;\n      if(purpose)config.paths[purpose[0].toUpperCase()+purpose.slice(1)] = pathItem;\n\n      // check login\n      if(checkLogin){\n        let originOnEnter = onEnter;\n        onEnter = function(nextState, replace) {\n          if(originOnEnter&&originOnEnter(nextState, replace)) return;\n\n          if(app.user&&app.navigator&&!app.user.isLogin()){\n            app.trigger('onNavigatePrevent', nextState);\n            replace(typeof(app.config.paths.Login)==='string'?app.config.paths.Login:app.config.paths.Login.path);\n          }\n        }\n      }\n\n      // component\n      component = createRouteComponent(app, component, container);\n\n      // components\n      if(components){\n        Object.keys(components).forEach((v)=>{\n          let component = components[v];\n          if(component&&typeof(component)==='object'){\n            components[v] = createRouteComponent(app, component.component,component.container);\n          }\n        });\n      }\n\n      // restart\n      if(restartOnParamChange||restartOnQueryChange){\n        const KeysComponent = component;\n        component = function (props) {\n          let KeysComponentkey = '/'+path;\n          if(restartOnParamChange)KeysComponentkey += Object.keys(props.params).filter((v)=>{return params.indexOf(v)>=0}).map((v)=>{return props.params[v]}).join(':')\n          if(restartOnQueryChange)KeysComponentkey += JSON.stringify(props.location.query);\n          return (<KeysComponent {...props} key={KeysComponentkey} />);\n        }\n      }\n\n      route = cloneElement(v,{path,onEnter,component,components});\n      if(children){ return props(route); }else{ return cloneElement(route); }\n    })});\n  })(route);\n}\n\n\n// app plugin\n//-----------------------------------------","ctx":{"type":"function","name":"routeProps","string":"routeProps()"}},{"tags":[{"type":"class","string":"","html":""}],"description":{"full":"<p>最先加载的插件</p>","summary":"<p>最先加载的插件</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":true,"line":173,"codeStart":177,"code":"export let appPluginBefore = {\n  init(app) {\n    app.bindActionCreators = function(actions) {\n    }\n\n    app.combineReducers = function(reducers) {\n\n    }\n    app.dispatch = function(action) {\n      if(!action) return;\n      app.actionStore.dispatch(action);\n    }\n    app.getState = function(name, defaultValue) {\n      let state = this.actionStore.getState();\n      return (name?state[name]:state)||defaultValue;\n    }\n\n    app.AppComponentPage = AppComponentPage;\n    app.appComponentContainer = appComponentContainer;\n    app.pageHoc = pageHoc;\n    app.containerHoc = containerHoc\n    app.ErrorComponent = function(props) {\n      let { title, error } = props;\n      return (\n        <div className=\"margin\">\n          <h3>{title||'error'}</h3>\n          <h5>{error instanceof Error?error.message:error}</h5>\n        </div>\n      );\n    }\n  }\n}","ctx":false},{"tags":[{"type":"class","string":"","html":""}],"description":{"full":"<p>最加载的插件</p>","summary":"<p>最加载的插件</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":true,"line":210,"codeStart":214,"code":"export let appPluginAfter = {\n  onCreateStoreBefore(app) {\n    Object.assign(app.actions,{\n      appReady,\n      noticeMessage,\n      noticeLoading,\n      noticeBlocking,\n    });\n  },\n\n  onCreateStore(app) {\n    function createThunkMiddleware(extraArgument) {\n      return ({ dispatch, getState }) => next => action => {\n        if (typeof action === 'function') {\n          return action(app, dispatch, getState, extraArgument);\n        }\n    \n        return next(action);\n      };\n    }\n\n    const createStoreWithMiddleware = applyMiddleware(createThunkMiddleware(), ...(app.options.middlewares||[]))(createStore);\n    app.actionStore = createStoreWithMiddleware(combineReducers( app.reducers), app.options.states);\n    app.actions = bindActionCreators(app.actions, app.actionStore.dispatch);\n  },\n\n  onRender(app) {\n    app.routes = routeProps(app.routes, app.config, app);\n    render((\n      <Provider store={app.actionStore}>\n        <Router \n          history={app.options.history||hashHistory} \n          render={(props)=>{\n            app.trigger('onNavigated', props);\n            return <RouterContext {...props} />\n          }} >\n          <Route \n            path=\"\" \n            component={createRouteComponent(app, AppComponentPage, appComponentContainer)}>\n            {app.routes}\n          </Route>  \n          <Route \n            path=\"*\" \n            onEnter={(...args)=>{\n              return app.trigger('onErrorNavigator', ...args);\n            }}>\n          </Route>  \n        </Router>\n      </Provider>\n    ),app.domRoot);\n  },\n\n  onErrorNavigator(app, nextState, replace) {\n    app.error('app-navigator error:', 'no route-',nextState.location.pathname);\n    replace('/');\n  },\n  onErrorPageRender(app, error, title) {\n    title = title||'page render error';\n    app.error(error, title);\n    setTimeout(()=>app.errorRender(error, title),0);\n    return null;\n  },\n  onRenderMessage(app, error, title) {\n    render(<app.ErrorComponent title={title} error={error} />, app.domRoot);\n  },\n  onLog(app, type, trace, ...args) {\n    if(trace)console.trace();\n    if(type==='error'){\n      console.error(...args);\n    }else if(type==='debug'){\n      console.debug(...args);\n    }else{\n      console.log(...args);\n    }\n  },\n\n  onNavigated(app, location) {\n    app.pages.forEach(v=>v.props.container.handlers.onRoute&&v.props.container.handlers.onRoute(location))\n  },\n}","ctx":false}]
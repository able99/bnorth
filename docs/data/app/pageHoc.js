[{"tags":[{"type":"copyright","string":"(c) 2016 able99","html":"<p>(c) 2016 able99</p>"},{"type":"author","string":"able99 (8846755@qq.com)","html":"<p>able99 (8846755@qq.com)</p>"},{"type":"license","string":"MIT","html":"<p>MIT</p>"}],"description":{"full":"<p>bnorth solution</p>","summary":"<p>bnorth solution</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1,"codeStart":9,"code":"import React from 'react';\nimport { setBrowserTitle } from '../utils/browser';","ctx":false},{"tags":[{"type":"class","string":"Page","html":"<p>Page</p>"}],"description":{"full":"<p>bnorth 中页面组件的基类，bnorth会自动将react 组件通过高级函数pageHoc 进行超类扩展<br />\n页面组件负责纯组件的渲染，使用container 注入的props 即可，一般无需使用state<br />\n页面组件中的props包括react router注入的路由属性，包括router，route，lcation，params等，参见<a href=\"https://github.com/ReactTraining/react-router/tree/v3/docs\">react-router 3</a></p>","summary":"<p>bnorth 中页面组件的基类，bnorth会自动将react 组件通过高级函数pageHoc 进行超类扩展<br />\n页面组件负责纯组件的渲染，使用container 注入的props 即可，一般无需使用state<br />\n页面组件中的props包括react router注入的路由属性，包括router，route，lcation，params等，参见<a href=\"https://github.com/ReactTraining/react-router/tree/v3/docs\">react-router 3</a></p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":false,"line":13,"codeStart":19,"code":"export default (app, Wrapper) => class extends Wrapper {\n  constructor(props) {\n    super(props);\n    this.app = app;\n    this._focus = false;\n  }\n\n  componentWillMount() {\n    app.pages.push(this);\n    if(this.props.onWillStart) this.props.onWillStart(this);\n    return super.componentWillMount && super.componentWillMount();\n  }\n\n  componentDidMount() {\n    if(this.props.onStart) this.props.onStart(this);\n    if(this.checkFocusChange()){this.componentDidResume();}\n    return super.componentDidMount && super.componentDidMount();\n  }\n\n  componentDidUpdate(prevProps) {\n    if(this.checkFocusChange()){\n      if(this.isFocus()){\n        this.componentDidResume();\n      }else{\n        this.componentDidPause();\n      }\n    }\n\n    return super.componentDidUpdate && super.componentDidUpdate();\n  }\n\n  componentWillUnmount() {\n    this.componentDidPause();\n\n    if(this.props.onStop) this.props.onStop(this);\n    let ret = super.componentWillUnmount && super.componentWillUnmount();\n\n    app.pages.splice(app.pages.indexOf(this));\n    return ret;\n  }\n\n  componentDidPause() {\n    if(this.props.onPause) this.props.onPause(this);\n    return super.componentDidPause && super.componentDidPause();\n  }\n\n  componentDidResume() {\n    setBrowserTitle(this.props.route.title||app.config.browser.title);\n    if(this.props.onResume) this.props.onResume(this);\n    return super.componentDidResume && super.componentDidResume();\n  }\n\n  componentDidBackKey() {\n    if(this.props.onBackKey) this.props.onBackKey(this);\n    return super.componentDidBackKey && super.componentDidBackKey();\n  }\n\n  render(){\n    let name = Wrapper.displayName||Wrapper.name;\n    app.verbose(`page render(${name}):`,this);\n\n    let ret;\n    try{\n      ret = super.render();\n    }catch(e){\n      return app.trigger('onErrorPageRender', e);\n    }\n    if(this.isAppPage()){\n      return ret;\n    }\n\n    ret = React.cloneElement( ret, Object.assign( {\n      'data-bnorth-page': name, \n      'data-blur': !this.isFocus(),\n    }, ret.props));\n    \n    if(this.getSubs().indexOf(this.getPageChildPath())>=0){\n      return (<div>{ret}{this.props[this.getPageChildPath()] && this.props[this.getPageChildPath()].props.children}</div>);\n    }else{\n      return (<div>{ret}{this.isSubPage()?null:this.props.children}</div>);\n    }\n  }","ctx":false},{"tags":[{"type":"method","string":"","html":""}],"description":{"full":"<p>返回是否是App 根组件</p>","summary":"<p>返回是否是App 根组件</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":true,"line":102,"codeStart":106,"code":"isAppPage() {\n  return this.props.routes[0]===this.props.route;\n}\n\ncheckFocusChange() {\n  let oldFocus = this._focus;\n  this._focus = this.isFocus();\n  return this._focus !== oldFocus;\n}","ctx":{"type":"method","name":"isAppPage","string":"isAppPage()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"return","string":"{boolean}","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{boolean}</p>"}],"description":{"full":"<p>返回是否页面在顶层</p>","summary":"<p>返回是否页面在顶层</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":116,"codeStart":121,"code":"isFocus() {\n  if(this.getSubs().hasOwnProperty(this.getPageChildPath())){\n    return !Boolean(this.props[this.getPageChildPath()] && this.props[this.getPageChildPath()].props.children);\n  }else{\n    return !Boolean(this.props.children);\n  }\n}","ctx":{"type":"method","name":"isFocus","string":"isFocus()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"return","string":"{boolean}","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{boolean}</p>"}],"description":{"full":"<p>返回是否是容器组件</p>","summary":"<p>返回是否是容器组件</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":129,"codeStart":134,"code":"isContainer() {\n  return (this.props.route.childRoutes||[]).find((v)=>{\n    return v.components;\n  });\n}","ctx":{"type":"method","name":"isContainer","string":"isContainer()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"return","string":"{array} - 子组件的名称数组","types":["array"],"typesDescription":"<code>array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li>子组件的名称数组</li>\n</ul>"}],"description":{"full":"<p>容器组件返回其子组件列表</p>","summary":"<p>容器组件返回其子组件列表</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":140,"codeStart":145,"code":"getSubs() {\n  return (this.props.route.childRoutes||[])\n  .filter((v)=>{\n    return v.components;\n  })\n  .map((v)=>{\n    return v.path;\n  });\n}","ctx":{"type":"method","name":"getSubs","string":"getSubs()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"return","string":"{boolean}","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{boolean}</p>"}],"description":{"full":"<p>是否是子组件</p>","summary":"<p>是否是子组件</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":155,"codeStart":160,"code":"isSubPage() {\n  return Boolean(this.props.route.components);\n}","ctx":{"type":"method","name":"isSubPage","string":"isSubPage()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"return","string":"{string}","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{string}</p>"}],"description":{"full":"<p>返回当前页面的全路径</p>","summary":"<p>返回当前页面的全路径</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":164,"codeStart":169,"code":"getPageFullPath() {\n  let routes = [];\n  for(let route of this.props.routes){\n    if(!route.path) continue;\n    routes.push(route.path===\"/\"?\"\":route.path);\n    if(route===this.props.route) break;\n  }\n  let pathname = routes.join(\"/\");\n  for (let key in this.props.router.params) {\n    let re = new RegExp(\":\"+key,\"g\"); \n    pathname = pathname.replace(re,this.props.router.params[key]);\n  }\n  return pathname;\n}","ctx":{"type":"method","name":"getPageFullPath","string":"getPageFullPath()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"return","string":"{string}","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{string}</p>"}],"description":{"full":"<p>容器组件返回当前显示中的子组件路径</p>","summary":"<p>容器组件返回当前显示中的子组件路径</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":184,"codeStart":189,"code":"getPageChildPath() {\n  let ret = null;\n  for(let i=0; i<this.props.routes.length; i++){\n    let route = this.props.routes[i];\n    if(!route.path) continue;\n    if(route===this.props.route) {\n      ret = this.props.routes[i+1];\n      break;\n    }\n  }\n  return ret?ret.path:null;\n}","ctx":{"type":"method","name":"getPageChildPath","string":"getPageChildPath()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"return","string":"{string}","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{string}</p>"}],"description":{"full":"<p>子组件返回其容器组件的路径</p>","summary":"<p>子组件返回其容器组件的路径</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":202,"codeStart":207,"code":"getPageParentPath() {\n  let ret = null;\n  for(let i=0; i<this.props.routes.length; i++){\n    let route = this.props.routes[i];\n    if(!route.path) continue;\n    if(route===this.props.route) break;\n    ret = route.path;\n  }\n  return ret\n}\n}","ctx":{"type":"method","name":"getPageParentPath","string":"getPageParentPath()"}}]
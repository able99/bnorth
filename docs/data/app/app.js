[{"tags":[{"type":"copyright","string":"(c) 2016 able99","html":"<p>(c) 2016 able99</p>"},{"type":"author","string":"able99 (8846755@qq.com)","html":"<p>able99 (8846755@qq.com)</p>"},{"type":"license","string":"MIT","html":"<p>MIT</p>"}],"description":{"full":"<p>bnorth solution</p>","summary":"<p>bnorth solution</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1,"codeStart":9,"code":"import React,{cloneElement}  from 'react';\nimport { render } from 'react-dom';\nimport { combineReducers,createStore,applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport { Router,Route,hashHistory,RouterContext } from 'react-router';\nimport bindActionCreators from '../utils/bindActionCreators';\nimport config from './config';\nimport pageHoc from './page';\nimport { containerConnect } from './container';\nimport appPlugin from './appPlugin';\nimport { AppComponentPage, appComponentContainerCreator } from './appComponent';\n\n\nlet _instance = null;","ctx":false},{"tags":[{"type":"class","string":"","html":""},{"type":"example","string":"```js\nlet app = App.instance({});\napp.start();\n```","html":"<pre><code class=\"lang-js\">let app = App.instance({});\napp.start();\n</code></pre>"}],"description":{"full":"<p>应用程序的主类<br />\n使用单例模式，保证只有一个应用实例，建立后通过start 函数即可启动应用</p>","summary":"<p>应用程序的主类<br />\n使用单例模式，保证只有一个应用实例，建立后通过start 函数即可启动应用</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":false,"line":25,"codeStart":35,"code":"export default class App {\n\n  // constructor\n  // ------------------------------------------------------------","ctx":{"type":"class","constructor":"App","cons":"App","name":"App","extends":"","string":"new App()"}},{"tags":[{"type":"constructor","string":"","html":""},{"type":"param","string":"{object} options - 参数","name":"options","description":"<ul>\n<li>参数</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"example","string":"```js\noptions = {\n  config       // 配置参数，参见config 模块\n  startEvents  // 启动阶段各个回调函数名称数组，建议不要修改该参数，比如丢失了onRender 事件，将无法显示\n  plugin       // 用户插件，第一个插入的插件\n  domIdRoot    // html中react 根元素名称，默认 `root`\n  middlewares  // redux 中间件数组，默认为空\n  status       // redux store 中的起始数据，默认为空\n}\n\nlet app = App.instance(options);\n```","html":"<pre><code class=\"lang-js\">options = {\n  config       // 配置参数，参见config 模块\n  startEvents  // 启动阶段各个回调函数名称数组，建议不要修改该参数，比如丢失了onRender 事件，将无法显示\n  plugin       // 用户插件，第一个插入的插件\n  domIdRoot    // html中react 根元素名称，默认 `root`\n  middlewares  // redux 中间件数组，默认为空\n  status       // redux store 中的起始数据，默认为空\n}\n\nlet app = App.instance(options);\n</code></pre>"}],"description":{"full":"<p>App 为单例模式，不要直接构造，使用instance 函数构造与获取</p>","summary":"<p>App 为单例模式，不要直接构造，使用instance 函数构造与获取</p>","body":""},"isPrivate":false,"isConstructor":true,"isClass":false,"isEvent":false,"ignore":false,"line":39,"codeStart":57,"code":"constructor(options) {\n  if(!_instance) {\n    this.options = options||{};\n\n    this._startEvents = options.startEvents || ['onConfigBefore', 'onConfig', 'onImportStyles', 'onImportStylesAfter', 'onCreateStoreBefore', 'onCreateStore', 'onCreateStoreAfter', 'onImportRoutes', 'onImportRoutesAfter' ,'onHook', 'onRender'];\n    this._stateError = false;\n    this._pluginReady = false;","ctx":{"type":"constructor","constructor":"App","cons":"App","name":"constructor","string":"App.prototype.constructor()"}},{"tags":[{"type":"property","string":"{boolean} started - 是否完成启动","name":"started","description":"<ul>\n<li>是否完成启动</li>\n</ul>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":65,"codeStart":68,"code":"this.started = false;","ctx":{"type":"property","receiver":"this","name":"started","value":"false","string":"this.started"}},{"tags":[{"type":"property","string":"{config} config - app 配置信息","name":"config","description":"<ul>\n<li>app 配置信息</li>\n</ul>","types":["config"],"typesDescription":"<a href=\"config.html\">config</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":69,"codeStart":72,"code":"this.config = Object.assign(config,this.options.config||{});\nthis.config.loadStorage();","ctx":{"type":"property","receiver":"this","name":"config","value":"Object.assign(config,this.options.config||{})","string":"this.config"}},{"tags":[{"type":"property","string":"{route[]} routes - 路由表","name":"routes","description":"<ul>\n<li>路由表</li>\n</ul>","types":["Array.<route>"],"typesDescription":"<code>Array</code>.&lt;<a href=\"route.html\">route</a>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":74,"codeStart":77,"code":"this.routes = null;","ctx":{"type":"property","receiver":"this","name":"routes","value":"null","string":"this.routes"}},{"tags":[{"type":"property","string":"{action[]} actions - app 的action 函数列表","name":"actions","description":"<ul>\n<li>app 的action 函数列表</li>\n</ul>","types":["Array.<action>"],"typesDescription":"<code>Array</code>.&lt;<a href=\"action.html\">action</a>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":78,"codeStart":81,"code":"this.actions = {};","ctx":{"type":"property","receiver":"this","name":"actions","value":"{}","string":"this.actions"}},{"tags":[{"type":"property","string":"{ActionState[]} actionStates - app 的数据管理器列表","name":"actionStates","description":"<ul>\n<li>app 的数据管理器列表</li>\n</ul>","types":["Array.<ActionState>"],"typesDescription":"<code>Array</code>.&lt;<a href=\"ActionState.html\">ActionState</a>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":82,"codeStart":85,"code":"this.actionStates = {};","ctx":{"type":"property","receiver":"this","name":"actionStates","value":"{}","string":"this.actionStates"}},{"tags":[{"type":"property","string":"{reduxer[]} reduxers - app 中正在运行的reduxer 列表","name":"reduxers","description":"<ul>\n<li>app 中正在运行的reduxer 列表</li>\n</ul>","types":["Array.<reduxer>"],"typesDescription":"<code>Array</code>.&lt;<a href=\"reduxer.html\">reduxer</a>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":86,"codeStart":89,"code":"this.reduxers = {};","ctx":{"type":"property","receiver":"this","name":"reduxers","value":"{}","string":"this.reduxers"}},{"tags":[{"type":"property","string":"{Page[]} _pages - app 中正在运行的页面的列表","name":"_pages","description":"<ul>\n<li>app 中正在运行的页面的列表</li>\n</ul>","types":["Array.<Page>"],"typesDescription":"<code>Array</code>.&lt;<a href=\"Page.html\">Page</a>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":90,"codeStart":93,"code":"this._pages = [];","ctx":{"type":"property","receiver":"this","name":"_pages","value":"[]","string":"this._pages"}},{"tags":[{"type":"property","string":"{plugin[]} _plugins - app 中正在运行的插件列表","name":"_plugins","description":"<ul>\n<li>app 中正在运行的插件列表</li>\n</ul>","types":["Array.<plugin>"],"typesDescription":"<code>Array</code>.&lt;<code>plugin</code>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":94,"codeStart":97,"code":"this._plugins = [];","ctx":{"type":"property","receiver":"this","name":"_plugins","value":"[]","string":"this._plugins"}},{"tags":[{"type":"property","string":"{Page} _AppComponentPage - app 默认跟页面 Page，已设置默认，一般无需修改","name":"_AppComponentPage","description":"<ul>\n<li>app 默认跟页面 Page，已设置默认，一般无需修改</li>\n</ul>","types":["Page"],"typesDescription":"<a href=\"Page.html\">Page</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":98,"codeStart":101,"code":"this._AppComponentPage = AppComponentPage;","ctx":{"type":"property","receiver":"this","name":"_AppComponentPage","value":"AppComponentPage","string":"this._AppComponentPage"}},{"tags":[{"type":"property","string":"{containerCreator} _appComponentContainerCreator - app 默认跟页面 Container creator，已设置默认，一般无需修改","name":"_appComponentContainerCreator","description":"<ul>\n<li>app 默认跟页面 Container creator，已设置默认，一般无需修改</li>\n</ul>","types":["containerCreator"],"typesDescription":"<a href=\"containerCreator.html\">containerCreator</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":103,"codeStart":106,"code":"this._appComponentContainerCreator = appComponentContainerCreator;","ctx":{"type":"property","receiver":"this","name":"_appComponentContainerCreator","value":"appComponentContainerCreator","string":"this._appComponentContainerCreator"}},{"tags":[{"type":"property","string":"{pageHoc} _pageHoc - app 默认页面Page 高阶组件，已设置默认，一般无需修改","name":"_pageHoc","description":"<ul>\n<li>app 默认页面Page 高阶组件，已设置默认，一般无需修改</li>\n</ul>","types":["pageHoc"],"typesDescription":"<a href=\"pageHoc.html\">pageHoc</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":108,"codeStart":111,"code":"this._pageHoc = pageHoc;","ctx":{"type":"property","receiver":"this","name":"_pageHoc","value":"pageHoc","string":"this._pageHoc"}},{"tags":[{"type":"property","string":"{containerConnect} _containerConnect - app 默认Container 转换函数，已设置默认，一般无需修改","name":"_containerConnect","description":"<ul>\n<li>app 默认Container 转换函数，已设置默认，一般无需修改</li>\n</ul>","types":["containerConnect"],"typesDescription":"<a href=\"containerConnect.html\">containerConnect</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":113,"codeStart":116,"code":"this._containerConnect = containerConnect;\n\n\nif(this.options.plugin) {\n  this.options.plugin.name = this.options.plugin.name||'app_custom';\n  this.use(this.options.plugin);\n}\n    }\n\n    _instance = this;\n    window.app = _instance;\n    return _instance;\n  }","ctx":{"type":"property","receiver":"this","name":"_containerConnect","value":"containerConnect","string":"this._containerConnect"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{object} options - 参数","name":"options","description":"<ul>\n<li>参数</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>获取App单一实例</p>","summary":"<p>获取App单一实例</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":130,"codeStart":135,"code":"static instance(...args) {\n  if(_instance) return _instance;\n  return new App(...args);\n}\n\n// react react-script react-redux\n// ---------------------------------------------------------","ctx":{"type":"method","name":"instance","string":"instance()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{Page} Page - 页面组件","name":"Page","description":"<ul>\n<li>页面组件</li>\n</ul>","types":["Page"],"typesDescription":"<a href=\"Page.html\">Page</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{containerCreator} containerCreator - 页面容器","name":"containerCreator","description":"<ul>\n<li>页面容器</li>\n</ul>","types":["containerCreator"],"typesDescription":"<a href=\"containerCreator.html\">containerCreator</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{string} name - container 名称，该名称同时作为唯一id","name":"name","description":"<ul>\n<li>container 名称，该名称同时作为唯一id</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{element} - 返回经过页面组件与页面容器高阶化后的组件","types":["element"],"typesDescription":"<code>element</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li>返回经过页面组件与页面容器高阶化后的组件</li>\n</ul>"}],"description":{"full":"<p>建立经过页面组件与页面容器高阶化后的组件</p>","summary":"<p>建立经过页面组件与页面容器高阶化后的组件</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":142,"codeStart":150,"code":"_createRouteComponent (page, container, name) {\n  if(!page) return null;\n\n  page = app._pageHoc(app, page);\n  container = app._containerConnect(app, container, name);\n  return container?container(page):page;\n}","ctx":{"type":"method","name":"_createRouteComponent","string":"_createRouteComponent()"}},{"tags":[{"type":"method","string":"","html":""}],"description":{"full":"<p>建立经过页面组件与页面容器高阶化后的根组件</p>","summary":"<p>建立经过页面组件与页面容器高阶化后的根组件</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":158,"codeStart":162,"code":"_createRootRouteComponent() {\n  return this._createRouteComponent(this._AppComponentPage, this._appComponentContainerCreator, 'app');\n}","ctx":{"type":"method","name":"_createRootRouteComponent","string":"_createRootRouteComponent()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{*} originOnEnter ","name":"originOnEnter","description":"","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{*} originOnEnter</p>"},{"type":"param","string":"{*} nextState ","name":"nextState","description":"","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{*} nextState</p>"},{"type":"param","string":"{*} replace ","name":"replace","description":"","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{*} replace</p>"},{"type":"param","string":"{*} callback","name":"callback","description":"","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{*} callback</p>"}],"description":{"full":"<p>处理route 进入事件</p>","summary":"<p>处理route 进入事件</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":166,"codeStart":174,"code":"_handleRouteOnEnter(originOnEnter, nextState, replace, callback) {\n  let ret = this.trigger('onNavigating', nextState);\n  if(ret) {\n    this.trigger('onNavigatePrevent', nextState);\n    replace(ret);\n    return;\n  }\n\n  if(originOnEnter)\n    originOnEnter(nextState, replace, callback);\n  else\n    callback();\n}","ctx":{"type":"method","name":"_handleRouteOnEnter","string":"_handleRouteOnEnter()"}},{"tags":[{"type":"method","string":"","html":""}],"description":{"full":"<p>配置route 属性值</p>","summary":"<p>配置route 属性值</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":188,"codeStart":192,"code":"_configRouteProps(route) {\n  if(!route||!route.props) return route;\n  let app = this;\n  let config = this.config;\n  if(route.props.onInit) route.props.onInit(app);\n\n  return (function props(route){\n    return cloneElement(route,{children:React.Children.map(route.props.children,(v,i)=>{\n      let { key } = v;\n      let { path, pathname, container, component, components, children, checkLogin, restartOnParamChange, restartOnQueryChange, onEnter, purpose } = v.props;\n\n      // path and path param\n      if(path||!key){ path = path===true||!key?'':path; }else{ path = key; }\n      let paths = path.split('/');\n      let params = paths.filter((v)=>{return v.indexOf(':')===0}).map((v)=>{return v.slice(1)});\n      pathname = (pathname||paths[0]||paths[1]||'');\n\n      // navi path\n      let pathItem = {path:pathname, params};\n      config.paths[pathname.replace(/-/g,'_')] = pathItem;\n      if(purpose)config.paths[purpose[0].toUpperCase()+purpose.slice(1)] = pathItem;\n\n      // check login\n      let originOnEnter = onEnter;\n      onEnter = (route.type === Route)&&((...args)=>app._handleRouteOnEnter(originOnEnter, ...args));\n      \n      // component\n      component = app._createRouteComponent(component, container, `cn:${path}`);\n\n      // components\n      if(components){\n        Object.keys(components).forEach((v)=>{\n          let component = components[v];\n          if(component&&typeof(component)==='object'){\n            components[v] = app._createRouteComponent(component.component, component.container, `cn:${path}:${v}`);\n          }\n        });\n      }\n\n      // restart\n      if(restartOnParamChange||restartOnQueryChange){\n        const KeysComponent = component;\n        component = function (props) {\n          let KeysComponentkey = '/'+path;\n          if(restartOnParamChange)KeysComponentkey += Object.keys(props.params).filter((v)=>{return params.indexOf(v)>=0}).map((v)=>{return props.params[v]}).join(':')\n          if(restartOnQueryChange)KeysComponentkey += JSON.stringify(props.location.query);\n          return (<KeysComponent {...props} key={KeysComponentkey} />);\n        }\n      }\n\n      route = cloneElement(v,{path,onEnter,component,components});\n      if(children){ return props(route); }else{ return cloneElement(route); }\n    })});\n  })(route);\n}","ctx":{"type":"method","name":"_configRouteProps","string":"_configRouteProps()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"return","string":"{function} - redux middleware","types":["function"],"typesDescription":"<code>function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li>redux middleware</li>\n</ul>"}],"description":{"full":"<p>create redux middleware for runanble action</p>","summary":"<p>create redux middleware for runanble action</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":248,"codeStart":253,"code":"_createThunkMiddleware() {\n  return ({ dispatch, getState }) => next => action => {\n    if (typeof action === 'function') {\n      let title = `action func(${action.fname||action.name||'anonymous'}): `;\n      try{\n        app.verbose(title);\n        return action(app, dispatch, getState);\n      }catch(e){\n        app.error(title, e);\n        app.errorNotice(e);\n      }\n    }\n\n    app.verbose('action:', action);\n    return next(action);\n  };\n}","ctx":{"type":"method","name":"_createThunkMiddleware","string":"_createThunkMiddleware()"}},{"tags":[{"type":"method","string":"","html":""}],"description":{"full":"<p>建立根组件</p>","summary":"<p>建立根组件</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":271,"codeStart":275,"code":"_createRootComponent() {\n  return (\n    <Provider store={this.actionStore}>\n      <Router \n        history={this.options.history||hashHistory} \n        render={(props)=>{this.trigger('onNavigated', props); return <RouterContext {...props} />}} >\n        <Route path=\"\" component={this._createRootRouteComponent()}>\n          {this.routes}\n        </Route>  \n        <Route path=\"*\" onEnter={(...args)=>this.trigger('onErrorNavigator', ...args) }>\n        </Route>  \n      </Router>\n    </Provider>\n  )\n}","ctx":{"type":"method","name":"_createRootComponent","string":"_createRootComponent()"}},{"tags":[{"type":"method","string":"","html":""}],"description":{"full":"<p>获取root 元素</p>","summary":"<p>获取root 元素</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":291,"codeStart":295,"code":"getRootElement() {\n  return document.getElementById(this.options.domIdRoot||'root');\n}","ctx":{"type":"method","name":"getRootElement","string":"getRootElement()"}},{"tags":[{"type":"method","string":"","html":""}],"description":{"full":"<p>app 显示页面等待中的无状态组件函数</p>","summary":"<p>app 显示页面等待中的无状态组件函数</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":299,"codeStart":303,"code":"_WaittingComponent(props) {\n  let styleSetFull = {position: 'absolute', left: 0, right: 0, top: 0, bottom: 0, width: '100%', height: '100%'};\n  let styleSetCenter = {marginTop: '4rem', textAlign: 'center'};\n  return <div style={{...styleSetFull, ...styleSetCenter}}>...</div>;\n}","ctx":{"type":"method","name":"_WaittingComponent","string":"_WaittingComponent()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{string} [title='error'] - 错误title","name":"[title='error']","description":"<ul>\n<li>错误title</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Error|element} error - 错误内容","name":"error","description":"<ul>\n<li>错误内容</li>\n</ul>","types":["Error","element"],"typesDescription":"<code>Error</code>|<code>element</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>app 显示页面错误的无状态组件函数</p>","summary":"<p>app 显示页面错误的无状态组件函数</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":309,"codeStart":315,"code":"_ErrorComponent(props) {\n  let { title, error } = props;\n  return (\n    <div className=\"margin\">\n      <h3>{title||'error'}</h3>\n      <h5>{error instanceof Error?error.message:error}</h5>\n    </div>\n  );\n}","ctx":{"type":"method","name":"_ErrorComponent","string":"_ErrorComponent()"}},{"tags":[{"type":"method","string":"","html":""}],"description":{"full":"<p>建立redux 数据仓库</p>","summary":"<p>建立redux 数据仓库</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":325,"codeStart":329,"code":"_createStore() {\n  const createStoreWithMiddleware = applyMiddleware(this._createThunkMiddleware(), ...(this.options.middlewares||[]))(createStore);\n  this.actionStore = createStoreWithMiddleware(combineReducers( this.reduxers), this.options.states);\n  this.actions = bindActionCreators(this.actions, this.actionStore.dispatch);\n}","ctx":{"type":"method","name":"_createStore","string":"_createStore()"}},{"tags":[{"type":"method","string":"","html":""}],"description":{"full":"<p>start rendor</p>","summary":"<p>start rendor</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":335,"codeStart":339,"code":"_render() {\n  this.verbose('app render:', this.routes, this.config);\n  this.routes = this._configRouteProps(this.routes);\n  render(this._createRootComponent(),this.getRootElement());\n}\n\n\n// pages\n// ---------------------------------------------------------","ctx":{"type":"method","name":"_render","string":"_render()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{element} - page","name":"-","description":"<p>page</p>","types":["element"],"typesDescription":"<code>element</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>将页面添加到页面管理器</p>","summary":"<p>将页面添加到页面管理器</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":348,"codeStart":353,"code":"addPage(page) {\n  this._pages.push(page);\n}","ctx":{"type":"method","name":"addPage","string":"addPage()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{element} - page","name":"-","description":"<p>page</p>","types":["element"],"typesDescription":"<code>element</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>将页面从页面管理器中移除</p>","summary":"<p>将页面从页面管理器中移除</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":357,"codeStart":362,"code":"removePage(page) {\n  this._pages.splice(app._pages.indexOf(page),1);\n}","ctx":{"type":"method","name":"removePage","string":"removePage()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{undefined|string|number|Page} name - \n**默认**：获取最后的页面，即当前焦点页面\n**空字符串，'/'，0**：获取app 根页面\n**number**：按页面序号获取\n**string**：按页面displayName获取\n**Page**： 直接返回Page","name":"name","description":"<ul>\n<li><strong>默认</strong>：获取最后的页面，即当前焦点页面<br />\n<strong>空字符串，'/'，0</strong>：获取app 根页面<br />\n<strong>number</strong>：按页面序号获取<br />\n<strong>string</strong>：按页面displayName获取<br />\n<strong>Page</strong>： 直接返回Page</li>\n</ul>","types":["string","number","Page"],"typesDescription":"<code>string</code>|<code>number</code>|<a href=\"Page.html\">Page</a>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>获取app 中的页面</p>","summary":"<p>获取app 中的页面</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":366,"codeStart":376,"code":"getPage(name) {\n  if(name===undefined){\n    return this._pages[this._pages.length-1];\n  } else if(name===''||name==='/'||name===0) {\n    return this._pages[0];\n  } else if(typeof(name)==='number'){\n    return this._pages[name];\n  } else if(typeof(name)==='string'){\n    return this._pages.find(v=>v.props.displayName===name);\n  } else {\n    return name;\n  }\n}\n\n\n// plugins \n// ------------------------------------------------------------","ctx":{"type":"method","name":"getPage","string":"getPage()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{!object} plugin - 插件","name":"plugin","description":"<ul>\n<li>插件</li>\n</ul>","types":["object"],"typesDescription":"!<code>object</code>","optional":false,"nullable":false,"nonNullable":true,"variable":false}],"description":{"full":"<p>添加插件到应用中，插件需要符合标准</p>","summary":"<p>添加插件到应用中，插件需要符合标准</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":393,"codeStart":398,"code":"use(plugin) {\n  if(plugin.name&&this._plugins.find(v=>v.name===plugin.name)){\n    let title = 'app plugin error';\n    let e = 'plugin has been used with name:' + plugin.name;\n    this.error(title, error);\n    this.errorRender(title, error)\n    return;\n  }\n\n  if(plugin.dependences) {\n    for(let dependence of (Array.isArray(plugin.dependences)?plugin.dependences:[plugin.dependences])) {\n      if(!this._plugins.find(v=>v.name===dependence)){\n        let title = 'app plugin error';\n        let error = `plugin:${plugin.name} dependence:${dependence} not ready`;\n        this.error(title, error);\n        this.errorRender(title, error);\n        return;\n      }\n    }\n  }\n\n  this._plugins.push(plugin);\n  plugin.init && plugin.init(this);\n}","ctx":{"type":"method","name":"use","string":"use()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{!string} name - 要移除插件的名称","name":"name","description":"<ul>\n<li>要移除插件的名称</li>\n</ul>","types":["string"],"typesDescription":"!<code>string</code>","optional":false,"nullable":false,"nonNullable":true,"variable":false}],"description":{"full":"<p>移除指定插件<br />\n移除后，相关处理事件不再处理，但是对app 的修改不能恢复</p>","summary":"<p>移除指定插件<br />\n移除后，相关处理事件不再处理，但是对app 的修改不能恢复</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":423,"codeStart":429,"code":"unuse(name) {\n  this._plugins\n  .filter(v.name===name)\n  .forEach(v=>{\n    this._plugins.remove(v);\n  });\n}","ctx":{"type":"method","name":"unuse","string":"unuse()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{!string} name - 要移除插件的名称","name":"name","description":"<ul>\n<li>要移除插件的名称</li>\n</ul>","types":["string"],"typesDescription":"!<code>string</code>","optional":false,"nullable":false,"nonNullable":true,"variable":false}],"description":{"full":"<p>获取指定名字的plugin</p>","summary":"<p>获取指定名字的plugin</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":437,"codeStart":442,"code":"getPlugin(name) {\n  return this._plugins.find(v.name&&v.name===name);\n}","ctx":{"type":"method","name":"getPlugin","string":"getPlugin()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{!string} event - 事件名称","name":"event","description":"<ul>\n<li>事件名称</li>\n</ul>","types":["string"],"typesDescription":"!<code>string</code>","optional":false,"nullable":false,"nonNullable":true,"variable":false},{"type":"param","string":"{...*} [args] - 事件参数","name":"[args]","description":"<ul>\n<li>事件参数</li>\n</ul>","types":[],"typesDescription":"<code>*</code>","optional":true,"nullable":false,"nonNullable":false,"variable":true}],"description":{"full":"<p>触发app 指定事件</p>","summary":"<p>触发app 指定事件</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":446,"codeStart":452,"code":"trigger(event, ...args) {\n  let ret;\n\n  for(let v of this._plugins) {\n    let title = `app event(${event}-${v&&v.name}):`;\n    try{\n      let handler = v&&v[event];\n      if(handler) {\n        if(event!=='onLog') app.verbose(title, ...args);\n        ret = handler(this, ...args);\n        if(ret){ return ret; }\n      }\n    }catch(e){ \n      this.error(title, e); \n      this.errorNotice(e,{title: title});\n    } \n  }\n\n  if(event!=='onLog') {\n    for(let v of this._pages||[]) {\n      try{\n        ret = v.props.container&&v.props.container.trigger&&v.props.container.trigger(event, ...args);\n        if(ret){ return ret; }\n      }catch(e){ \n        let title = `app container event(${event}):`;\n        this.error(title, e); \n        this.errorNotice(e,{title: title});\n      } \n    }\n  }\n\n  return ret;\n}\n\n// start\n// ------------------------------------------------------------","ctx":{"type":"method","name":"trigger","string":"trigger()"}},{"tags":[{"type":"method","string":"start","html":"<p>start</p>"}],"description":{"full":"<p>应用程序启动</p>","summary":"<p>应用程序启动</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":488,"codeStart":492,"code":"async start() {\n  this.use(appPlugin);\n  this._pluginReady = true;\n  try{\n    for(let event of this._startEvents){\n      for(let v of this._plugins) {\n        let handler = v&&v[event];\n        if(handler) {\n          app.verbose(`app start event(${event}-${v&&v.name}):`);\n          if(await handler(this)) continue;\n        }\n      }\n    }\n    this.started = true;\n  }catch(e){\n    let title = this.started?'app uncaught error':'app start error';\n    this.error(title, e);\n    this.errorRender(title, e);\n    return e;\n  }\n}\n\n// notice\n// ------------------------------------------------------------","ctx":false},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{...*} args - 日志列表","name":"args","description":"<ul>\n<li>日志列表</li>\n</ul>","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":true}],"description":{"full":"<p>打印日志-普通级别</p>","summary":"<p>打印日志-普通级别</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":516,"codeStart":521,"code":"log(...args) {\n  if(!this._pluginReady) {\n    console.log(...args);\n    return;\n  }\n  this.trigger('onLog',null,false,...args);\n}","ctx":{"type":"method","name":"log","string":"log()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{...*} args - 日志列表","name":"args","description":"<ul>\n<li>日志列表</li>\n</ul>","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":true}],"description":{"full":"<p>打印日志-调试级别</p>","summary":"<p>打印日志-调试级别</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":528,"codeStart":533,"code":"debug(...args) {\n  if(!this.config.debug) return;\n  if(!this._pluginReady) {\n    console.log(...args);\n    return;\n  }\n  this.trigger('onLog', 'debug', true, ...args);\n}","ctx":{"type":"method","name":"debug","string":"debug()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{...*} args - 日志列表","name":"args","description":"<ul>\n<li>日志列表</li>\n</ul>","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":true}],"description":{"full":"<p>打印日志-冗余级别</p>","summary":"<p>打印日志-冗余级别</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":541,"codeStart":546,"code":"verbose(...args) {\n  if(!this.config.verbose) return;\n  if(!this._pluginReady) {\n    console.log(...args);\n    return;\n  }\n  this.trigger('onLog', 'verbose', false, ...args);\n}","ctx":{"type":"method","name":"verbose","string":"verbose()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{...*} args - 日志列表","name":"args","description":"<ul>\n<li>日志列表</li>\n</ul>","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":true}],"description":{"full":"<p>打印日志-错误级别</p>","summary":"<p>打印日志-错误级别</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":554,"codeStart":559,"code":"error(...args) {\n  if(!this._pluginReady) {\n    console.error(...args);\n    return;\n  }\n  this.trigger('onLog', 'error', true, ...args);\n}","ctx":{"type":"method","name":"error","string":"error()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{string} [title] - 消息的标题","name":"[title]","description":"<ul>\n<li>消息的标题</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{...*} [args] - 消息列表","name":"[args]","description":"<ul>\n<li>消息列表</li>\n</ul>","types":[],"typesDescription":"<code>*</code>","optional":true,"nullable":false,"nonNullable":false,"variable":true}],"description":{"full":"<p>将错误通过页面渲染方式显示，整个应用将停止，仅显示错误</p>","summary":"<p>将错误通过页面渲染方式显示，整个应用将停止，仅显示错误</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":566,"codeStart":572,"code":"errorRender(...args) {\n  if(this._stateError)return;\n  if(!this._pluginReady) {\n    this.showMessageOnRootElement(args)\n    return;\n  }\n  this.trigger('onRenderMessage',...args);\n  this._stateError=true;\n}","ctx":{"type":"method","name":"errorRender","string":"errorRender()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{element} message - 显示的消息","name":"message","description":"<ul>\n<li>显示的消息</li>\n</ul>","types":["element"],"typesDescription":"<code>element</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{object} [props] - 消息显示的ui 属性","name":"[props]","description":"<ul>\n<li>消息显示的ui 属性</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{object} [options] - 消息显示的配置属性","name":"[options]","description":"<ul>\n<li>消息显示的配置属性</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>将错误通过notice方式显示</p>","summary":"<p>将错误通过notice方式显示</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":581,"codeStart":588,"code":"errorNotice(...args) {\n  if(!this.started) {\n    this.showMessageByAlert(args[0]);\n    return;\n  }\n  this.trigger('onNoticeMessage',...args);\n}","ctx":{"type":"method","name":"errorNotice","string":"errorNotice()"}},{"tags":[{"type":"method","string":"","html":""}],"description":{"full":"<p>显示错误到页面，同时将停止app 运行</p>","summary":"<p>显示错误到页面，同时将停止app 运行</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":596,"codeStart":600,"code":"showMessageOnRootElement(title, message) {\n  render(<this._ErrorComponent title={title} error={typeof(message)==='object'&&message.message||String(message)} />, this.getRootElement());\n}","ctx":{"type":"method","name":"showMessageOnRootElement","string":"showMessageOnRootElement()"}},{"tags":[{"type":"method","string":"","html":""}],"description":{"full":"<p>用alert 方式显示消息</p>","summary":"<p>用alert 方式显示消息</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":604,"codeStart":608,"code":"showMessageByAlert(message) {\n  alert(message);\n}\n\n// store\n// ---------------------------------------------------","ctx":{"type":"method","name":"showMessageByAlert","string":"showMessageByAlert()"}},{"tags":[{"type":"param","string":"{action[]} actions - action 列表","name":"actions","description":"<ul>\n<li>action 列表</li>\n</ul>","types":["Array.<action>"],"typesDescription":"<code>Array</code>.&lt;<a href=\"action.html\">action</a>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>增加新的actions，暂未实现</p>","summary":"<p>增加新的actions，暂未实现</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":614,"codeStart":618,"code":"bindActionCreators(actions) {\n}","ctx":{"type":"method","name":"bindActionCreators","string":"bindActionCreators()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{reduxer[]} reduxers - reduxer 列表","name":"reduxers","description":"<ul>\n<li>reduxer 列表</li>\n</ul>","types":["Array.<reduxer>"],"typesDescription":"<code>Array</code>.&lt;<a href=\"reduxer.html\">reduxer</a>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>增加新的reduxer，暂未实现</p>","summary":"<p>增加新的reduxer，暂未实现</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":621,"codeStart":626,"code":"combineReduxers(reduxers) {\n}","ctx":{"type":"method","name":"combineReduxers","string":"combineReduxers()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{!action} action - 要发射的action","name":"action","description":"<ul>\n<li>要发射的action</li>\n</ul>","types":["action"],"typesDescription":"!<a href=\"action.html\">action</a>","optional":false,"nullable":false,"nonNullable":true,"variable":false}],"description":{"full":"<p>分发action</p>","summary":"<p>分发action</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":629,"codeStart":634,"code":"dispatch(action) {\n  if(!action) return;\n  app.actionStore.dispatch(action);\n}","ctx":{"type":"method","name":"dispatch","string":"dispatch()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{string} [name] - 获取指定名称的仓库，默认为空，获取整个仓库","name":"[name]","description":"<ul>\n<li>获取指定名称的仓库，默认为空，获取整个仓库</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{*} [defaultValue] - 没有获取到时的默认值","name":"[defaultValue]","description":"<ul>\n<li>没有获取到时的默认值</li>\n</ul>","types":[],"typesDescription":"<code>*</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>获取数据仓库</p>","summary":"<p>获取数据仓库</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":639,"codeStart":645,"code":"getState(name, defaultValue) {\n  let state = this.actionStore.getState();\n  return (name?state[name]:state)||defaultValue;\n}\n}","ctx":{"type":"method","name":"getState","string":"getState()"}}]
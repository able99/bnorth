[{"tags":[{"type":"copyright","string":"(c) 2016 able99","html":"<p>(c) 2016 able99</p>"},{"type":"author","string":"able99 (8846755@qq.com)","html":"<p>able99 (8846755@qq.com)</p>"},{"type":"license","string":"MIT","html":"<p>MIT</p>"}],"description":{"full":"<p>bnorth solution</p>","summary":"<p>bnorth solution</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1,"codeStart":9,"code":"import config from './config';\nimport { appPluginBefore, appPluginAfter } from './appPlugin';\n\n\nlet _instance = null;","ctx":false},{"tags":[{"type":"class","string":"","html":""},{"type":"example","string":"```js\nlet app = App.instance({});\napp.start();\n```","html":"<pre><code class=\"lang-js\">let app = App.instance({});\napp.start();\n</code></pre>"}],"description":{"full":"<p>应用程序的主类<br />\n使用单例模式，保证只有一个应用实例，建立后通过start 函数即可启动应用</p>","summary":"<p>应用程序的主类<br />\n使用单例模式，保证只有一个应用实例，建立后通过start 函数即可启动应用</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":false,"line":16,"codeStart":26,"code":"export default class App {\n  // constructor\n  //--------------------","ctx":{"type":"class","constructor":"App","cons":"App","name":"App","extends":"","string":"new App()"}},{"tags":[{"type":"constructor","string":"","html":""},{"type":"param","string":"{object} options - 参数","name":"options","description":"<ul>\n<li>参数</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"example","string":"```js\noptions = {\n  config       // 配置参数，参见config 模块\n  startEvents  // 启动阶段各个回调函数名称数组，建议不要修改该参数，比如丢失了onRender 事件，将无法显示\n  plugin       // 插件，参见插件\n  domIdRoot    // html中react 根元素名称，默认 `root`\n  domIdWaiting // html中等待react加载的元素名称，默认 `waiting`\n  middlewares  // redux 中间件数组，默认为空\n  status       // redux store 中的起始数据，默认为空\n}\n\nlet app = App.instance(options);\n```","html":"<pre><code class=\"lang-js\">options = {\n  config       // 配置参数，参见config 模块\n  startEvents  // 启动阶段各个回调函数名称数组，建议不要修改该参数，比如丢失了onRender 事件，将无法显示\n  plugin       // 插件，参见插件\n  domIdRoot    // html中react 根元素名称，默认 `root`\n  domIdWaiting // html中等待react加载的元素名称，默认 `waiting`\n  middlewares  // redux 中间件数组，默认为空\n  status       // redux store 中的起始数据，默认为空\n}\n\nlet app = App.instance(options);\n</code></pre>"}],"description":{"full":"<p>App 为单例模式，不要直接构造，使用instance 函数构造与获取</p>","summary":"<p>App 为单例模式，不要直接构造，使用instance 函数构造与获取</p>","body":""},"isPrivate":false,"isConstructor":true,"isClass":false,"isEvent":false,"ignore":false,"line":29,"codeStart":48,"code":"constructor(options) {\n  if(!_instance) {\n    this.options = options||{};\n\n    this._startEvents = options.startEvents || ['onConfigBefore', 'onConfig', 'onImportStyles', 'onImportStylesAfter', 'onCreateStoreBefore', 'onCreateStore', 'onCreateStoreAfter', 'onImportRoutes', 'onImportRoutesAfter' ,'onHook', 'onRender'];\n    this._stateError = false;","ctx":{"type":"constructor","constructor":"App","cons":"App","name":"constructor","string":"App.prototype.constructor()"}},{"tags":[{"type":"property","string":"{object} config app 配置类，参见[config](/#/?name=%2Fbase%2Fconfig)","name":"config","description":"<p>app 配置类，参见<a href=\"/#/?name=%2Fbase%2Fconfig\">config</a></p>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":55,"codeStart":58,"code":"this.config = Object.assign(config,this.options.config||null);","ctx":{"type":"property","receiver":"this","name":"config","value":"Object.assign(config,this.options.config||null)","string":"this.config"}},{"tags":[{"type":"property","string":"{object[]} pages - app 中正在运行的插件列表","name":"pages","description":"<ul>\n<li>app 中正在运行的插件列表</li>\n</ul>","types":["Array.<object>"],"typesDescription":"<code>Array</code>.&lt;<code>object</code>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":59,"codeStart":62,"code":"this._plugins = [];","ctx":{"type":"property","receiver":"this","name":"_plugins","value":"[]","string":"this._plugins"}},{"tags":[{"type":"property","string":"{object} pages - 路由表","name":"pages","description":"<ul>\n<li>路由表</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":63,"codeStart":66,"code":"this.routes = null;","ctx":{"type":"property","receiver":"this","name":"routes","value":"null","string":"this.routes"}},{"tags":[{"type":"property","string":"{object[]} pages - app 的action 函数列表","name":"pages","description":"<ul>\n<li>app 的action 函数列表</li>\n</ul>","types":["Array.<object>"],"typesDescription":"<code>Array</code>.&lt;<code>object</code>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":67,"codeStart":70,"code":"this.actions = {};","ctx":{"type":"property","receiver":"this","name":"actions","value":"{}","string":"this.actions"}},{"tags":[{"type":"property","string":"{object[]} pages - app 的数据管理器列表","name":"pages","description":"<ul>\n<li>app 的数据管理器列表</li>\n</ul>","types":["Array.<object>"],"typesDescription":"<code>Array</code>.&lt;<code>object</code>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":71,"codeStart":74,"code":"this.actionStates = {};","ctx":{"type":"property","receiver":"this","name":"actionStates","value":"{}","string":"this.actionStates"}},{"tags":[{"type":"property","string":"{object[]} pages - app 中正在运行的reduxer 列表","name":"pages","description":"<ul>\n<li>app 中正在运行的reduxer 列表</li>\n</ul>","types":["Array.<object>"],"typesDescription":"<code>Array</code>.&lt;<code>object</code>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":75,"codeStart":78,"code":"this.reducers = {};","ctx":{"type":"property","receiver":"this","name":"reducers","value":"{}","string":"this.reducers"}},{"tags":[{"type":"property","string":"{object[]} pages - app 中正在运行的页面的列表","name":"pages","description":"<ul>\n<li>app 中正在运行的页面的列表</li>\n</ul>","types":["Array.<object>"],"typesDescription":"<code>Array</code>.&lt;<code>object</code>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":79,"codeStart":82,"code":"this.pages = [];\n\nthis.use(appPluginBefore);\nthis.options.plugin&&this.use(this.options.plugin);\n    }\n\n    _instance = this;\n    window.app = _instance;\n    return _instance;\n  }","ctx":{"type":"property","receiver":"this","name":"pages","value":"[]","string":"this.pages"}},{"tags":[{"type":"param","string":"{*} args","name":"args","description":"","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{*} args</p>"}],"description":{"full":"<p>单例模式</p>","summary":"<p>单例模式</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":true,"line":92,"codeStart":96,"code":"static instance(...args) {\n  if(_instance) return _instance;\n  return new App(...args);\n}\n\n// dom\n//--------------------","ctx":{"type":"method","name":"instance","string":"instance()"}},{"tags":[{"type":"property","string":"{element} [domRoot=root] root元素","name":"[domRoot=root]","description":"<p>root元素</p>","types":["element"],"typesDescription":"<code>element</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":103,"codeStart":106,"code":"get domRoot() {\n  return document.getElementById(this.options.domIdRoot||'root');\n}","ctx":{"type":"property","name":"domRoot","string":"domRoot"}},{"tags":[{"type":"property","string":"{element} [domWaiting=waiting] waiting元素","name":"[domWaiting=waiting]","description":"<p>waiting元素</p>","types":["element"],"typesDescription":"<code>element</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":110,"codeStart":113,"code":"get domWaiting() {\n  return document.getElementById(this.options.domIdWaiting||'waiting');\n}","ctx":{"type":"property","name":"domWaiting","string":"domWaiting"}},{"tags":[{"type":"method","string":"","html":""}],"description":{"full":"<p>移除react 加载动画</p>","summary":"<p>移除react 加载动画</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":117,"codeStart":121,"code":"removeWaiting() {\n  this.domWaiting && this.domWaiting.remove();\n}\n\n// pages\n// -------------------","ctx":{"type":"method","name":"removeWaiting","string":"removeWaiting()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{string|number} name - \n**默认**：获取最后的页面，即当前焦点页面\n**空字符串，'/'，0**：获取app 根页面\n**number**：按页面序号获取\n**string**：按页面displayName获取","name":"name","description":"<ul>\n<li><strong>默认</strong>：获取最后的页面，即当前焦点页面<br />\n<strong>空字符串，'/'，0</strong>：获取app 根页面<br />\n<strong>number</strong>：按页面序号获取<br />\n<strong>string</strong>：按页面displayName获取</li>\n</ul>","types":["string","number"],"typesDescription":"<code>string</code>|<code>number</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>获取app 中的页面</p>","summary":"<p>获取app 中的页面</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":127,"codeStart":136,"code":"getPage(name) {\n  if(name===undefined){\n    return this.pages[this.pages.length-1];\n  } else if(name===''||name==='/'||name===0) {\n    return this.pages[0];\n  } else if(typeof(name)==='number'){\n    return this.pages[name];\n  } else if(typeof(name)==='string'){\n    return this.pages.find(v=>v.props.displayName===name);\n  } else {\n    return name;\n  }\n}\n\n// plugins \n//--------------------","ctx":{"type":"method","name":"getPage","string":"getPage()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{!plugin} plugin","name":"plugin","description":"","types":["plugin"],"typesDescription":"!<code>plugin</code>","optional":false,"nullable":false,"nonNullable":true,"variable":false,"html":"<p>{!plugin} plugin</p>"}],"description":{"full":"<p>添加插件到应用中，插件需要符合标准</p>","summary":"<p>添加插件到应用中，插件需要符合标准</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":152,"codeStart":157,"code":"use(plugin) {\n  this._plugins.push(plugin);\n  plugin.init && plugin.init(this);\n}","ctx":{"type":"method","name":"use","string":"use()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{!string} name - 要移除插件的名称","name":"name","description":"<ul>\n<li>要移除插件的名称</li>\n</ul>","types":["string"],"typesDescription":"!<code>string</code>","optional":false,"nullable":false,"nonNullable":true,"variable":false}],"description":{"full":"<p>移除指定插件</p>","summary":"<p>移除指定插件</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":161,"codeStart":166,"code":"unuse(name) {\n  this._plugins\n  .filter(v.name===name)\n  .forEach(v=>{\n    this._plugins.remove(v);\n  });\n}","ctx":{"type":"method","name":"unuse","string":"unuse()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{!string} event 事件名称","name":"event","description":"<p>事件名称</p>","types":["string"],"typesDescription":"!<code>string</code>","optional":false,"nullable":false,"nonNullable":true,"variable":false},{"type":"param","string":"{...*} [args] 事件参数","name":"[args]","description":"<p>事件参数</p>","types":[],"typesDescription":"<code>*</code>","optional":true,"nullable":false,"nonNullable":false,"variable":true}],"description":{"full":"<p>触发app 指定事件</p>","summary":"<p>触发app 指定事件</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":173,"codeStart":179,"code":"trigger(event, ...args) {\n  let ret;\n  for(let v of this._plugins) {\n    try{\n      ret = v[event] && v[event](this, ...args);\n      if(ret){ return ret; }\n    }catch(e){ this.error(e); }\n  }\n\n  for(let v of this.pages||[]) {\n    try{\n      ret = v.props.container.handlers[event] && v.props.container.handlers[event](...args);\n      if(ret){ return ret; }\n    }catch(e){ this.error(e); } \n  }\n  return ret;\n}\n\n// start\n//--------------------","ctx":{"type":"method","name":"trigger","string":"trigger()"}},{"tags":[{"type":"method","string":"start","html":"<p>start</p>"}],"description":{"full":"<p>应用程序启动</p>","summary":"<p>应用程序启动</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":199,"codeStart":203,"code":"async start() {\n  this.use(appPluginAfter);\n  try{\n    for(let event of this._startEvents){\n      for(let v of this._plugins) {\n        if(v[event] &&  await v[event](this)) continue;\n      }\n    }\n  }catch(e){\n    this.error(e);\n    this.errorRender(e);\n    return e;\n  }\n}\n\n// interface\n//--------------------","ctx":false},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{...*} args","name":"args","description":"","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":true,"html":"<p>{...*} args</p>"}],"description":{"full":"<p>打印日志-普通级别</p>","summary":"<p>打印日志-普通级别</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":220,"codeStart":225,"code":"log(...args) {\n  this.trigger('onLog',null,false,...args);\n}","ctx":{"type":"method","name":"log","string":"log()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{...*} args","name":"args","description":"","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":true,"html":"<p>{...*} args</p>"}],"description":{"full":"<p>打印日志-调试级别</p>","summary":"<p>打印日志-调试级别</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":228,"codeStart":233,"code":"debug(...args) {\n  if(!this.config.debug) return;\n  this.trigger('onLog',null,false,...args);\n}","ctx":{"type":"method","name":"debug","string":"debug()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{...*} args","name":"args","description":"","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":true,"html":"<p>{...*} args</p>"}],"description":{"full":"<p>打印日志-冗余级别</p>","summary":"<p>打印日志-冗余级别</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":237,"codeStart":242,"code":"verbose(...args) {\n  if(!this.config.verbose) return;\n  this.trigger('onLog',null,false, ...args);\n}","ctx":{"type":"method","name":"verbose","string":"verbose()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{...*} args","name":"args","description":"","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":true,"html":"<p>{...*} args</p>"}],"description":{"full":"<p>打印日志-错误级别</p>","summary":"<p>打印日志-错误级别</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":246,"codeStart":251,"code":"error(...args) {\n  this.trigger('onLog','error',true,...args);\n}","ctx":{"type":"method","name":"error","string":"error()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{...*} args","name":"args","description":"","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":true,"html":"<p>{...*} args</p>"}],"description":{"full":"<p>将错误通过页面渲染方式显示，整个应用将停止，仅显示错误</p>","summary":"<p>将错误通过页面渲染方式显示，整个应用将停止，仅显示错误</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":254,"codeStart":259,"code":"errorRender(...args) {\n  if(this._stateError)return;\n  this.trigger('onRenderMessage',...args);\n  this._stateError=true;\n}","ctx":{"type":"method","name":"errorRender","string":"errorRender()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{...*} args","name":"args","description":"","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":true,"html":"<p>{...*} args</p>"}],"description":{"full":"<p>将错误通过notice方式显示</p>","summary":"<p>将错误通过notice方式显示</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":264,"codeStart":269,"code":"errorNotice(...args) {\n  this.trigger('onNoticeMessage',...args);\n}\n}","ctx":{"type":"method","name":"errorNotice","string":"errorNotice()"}},{"tags":[{"type":"class","string":"plugin","html":"<p>plugin</p>"},{"type":"example","string":"```js\nlet plugin = {\n  name: 'xxx',\n  init(app) {\n    ... // 在插件添加时执行初始化，比如修改app 的属性，比如添加actions\n  },\n  xxx(app) {\n    ... // 在app 各个startEvents 事件中，或者trigger 的特定事件时执行，同上\n  }\n}\n```","html":"<pre><code class=\"lang-js\">let plugin = {\n  name: 'xxx',\n  init(app) {\n    ... // 在插件添加时执行初始化，比如修改app 的属性，比如添加actions\n  },\n  xxx(app) {\n    ... // 在app 各个startEvents 事件中，或者trigger 的特定事件时执行，同上\n  }\n}\n</code></pre>"}],"description":{"full":"<p>添加到app 中，扩展app 的功能<br />\n插件主要实现各个回调函数，在函数中对app进行扩展或者实现特定功能<br />\n回调函数可能是初始化函数，启动阶段的各个函数或者由app 或者其他插件trigger 的事件</p>","summary":"<p>添加到app 中，扩展app 的功能<br />\n插件主要实现各个回调函数，在函数中对app进行扩展或者实现特定功能<br />\n回调函数可能是初始化函数，启动阶段的各个函数或者由app 或者其他插件trigger 的事件</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":false,"line":275,"codeStart":293},{"tags":[{"type":"property","string":"{string} name - 插件名称，同名称插件不能同时使用","name":"name","description":"<ul>\n<li>插件名称，同名称插件不能同时使用</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":294,"codeStart":297},{"tags":[{"type":"callback","string":"init","html":"<p>init</p>"},{"type":"param","string":"{App} app - 应用程序App的实例","name":"app","description":"<ul>\n<li>应用程序App的实例</li>\n</ul>","types":["App"],"typesDescription":"<a href=\"App.html\">App</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>插件被初始化时，在此初始化插件，修改app内容，扩展app功能，比如actions等</p>","summary":"<p>插件被初始化时，在此初始化插件，修改app内容，扩展app功能，比如actions等</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":298,"codeStart":303},{"tags":[{"type":"callback","string":"XXX","html":"<p>XXX</p>"},{"type":"param","string":"{App} app - 应用程序App的实例","name":"app","description":"<ul>\n<li>应用程序App的实例</li>\n</ul>","types":["App"],"typesDescription":"<a href=\"App.html\">App</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>启动阶段的回调函数，按顺序如下</p>\n<ol>\n<li>onConfigBefore - 配置阶段之前，该阶段可以从网络获取配置信息</li>\n<li>onConfig - 配置阶段，该阶段可以修改app.config 的默认配置和增加应用程序级别的配置</li>\n<li>onImportStyles - css加载阶段</li>\n<li>onImportStylesAfter - css加载完成，该阶段可以修改css 样式</li>\n<li>onCreateStoreBefore - 建立redux store之前</li>\n<li>onCreateStore - 建立redux store</li>\n<li>onCreateStoreAfter - redux store建立完成，该阶段可以添加新的action</li>\n<li>onImportRoutes - 加载路由表</li>\n<li>onImportRoutesAfter - 路由表加载结束，该阶段可以修改paths 信息</li>\n<li>onHook - hook阶段，该阶段可以修改app中各个类的默认行为</li>\n<li>onRender - 启动结束，开始渲染</li>\n</ol>\n<p>函数支持async异步处理，在该阶段没有处理完之前，下一阶段函数不会调用</p>\n<pre><code class=\"lang-js\">onImportRoutes(app) {\n  return import('./routes/xxx').then(v=&gt;{app.routes = v});\n}\n</code></pre>","summary":"<p>启动阶段的回调函数，按顺序如下</p>\n<ol>\n<li>onConfigBefore - 配置阶段之前，该阶段可以从网络获取配置信息</li>\n<li>onConfig - 配置阶段，该阶段可以修改app.config 的默认配置和增加应用程序级别的配置</li>\n<li>onImportStyles - css加载阶段</li>\n<li>onImportStylesAfter - css加载完成，该阶段可以修改css 样式</li>\n<li>onCreateStoreBefore - 建立redux store之前</li>\n<li>onCreateStore - 建立redux store</li>\n<li>onCreateStoreAfter - redux store建立完成，该阶段可以添加新的action</li>\n<li>onImportRoutes - 加载路由表</li>\n<li>onImportRoutesAfter - 路由表加载结束，该阶段可以修改paths 信息</li>\n<li>onHook - hook阶段，该阶段可以修改app中各个类的默认行为</li>\n<li>onRender - 启动结束，开始渲染</li>\n</ol>","body":"<p>函数支持async异步处理，在该阶段没有处理完之前，下一阶段函数不会调用</p>\n<pre><code class=\"lang-js\">onImportRoutes(app) {\n  return import('./routes/xxx').then(v=&gt;{app.routes = v});\n}\n</code></pre>"},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":304,"codeStart":327},{"tags":[{"type":"callback","string":"onAppWillStart","html":"<p>onAppWillStart</p>"}],"description":{"full":"<p>启动后进入应用运行阶段<br />\n应用将要启动阶段</p>","summary":"<p>启动后进入应用运行阶段<br />\n应用将要启动阶段</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":328,"codeStart":333},{"tags":[{"type":"callback","string":"onAppStart","html":"<p>onAppStart</p>"}],"description":{"full":"<p>应用已启动</p>","summary":"<p>应用已启动</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":334,"codeStart":338},{"tags":[{"type":"callback","string":"onAppStop","html":"<p>onAppStop</p>"}],"description":{"full":"<p>应用已停止</p>","summary":"<p>应用已停止</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":339,"codeStart":343},{"tags":[{"type":"callback","string":"onAppResume","html":"<p>onAppResume</p>"}],"description":{"full":"<p>应用暂停，应用切换到后台时触发，仅混合开发时有效</p>","summary":"<p>应用暂停，应用切换到后台时触发，仅混合开发时有效</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":344,"codeStart":348},{"tags":[{"type":"callback","string":"onAppPause","html":"<p>onAppPause</p>"}],"description":{"full":"<p>应用暂停，应用从后台返回时时触发，仅混合开发时有效</p>","summary":"<p>应用暂停，应用从后台返回时时触发，仅混合开发时有效</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":349,"codeStart":353},{"tags":[{"type":"callback","string":"onErrorPageRender","html":"<p>onErrorPageRender</p>"},{"type":"param","string":"{Error} error - error","name":"error","description":"<ul>\n<li>error</li>\n</ul>","types":["Error"],"typesDescription":"<code>Error</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{boolean} - 返回true，将不会触发插件列表中位于其后的插件回调","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li>返回true，将不会触发插件列表中位于其后的插件回调</li>\n</ul>"}],"description":{"full":"<p>页面组件render错误时触发</p>","summary":"<p>页面组件render错误时触发</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":354,"codeStart":360},{"tags":[{"type":"callback","string":"onNavigated","html":"<p>onNavigated</p>"},{"type":"param","string":"{object} props - 页面路由信息，参见[react-router3 router-render函数]()","name":"props","description":"<ul>\n<li>页面路由信息，参见<a href=\"\">react-router3 router-render函数</a></li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{boolean} - 返回true，将不会触发插件列表中位于其后的插件回调","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li>返回true，将不会触发插件列表中位于其后的插件回调</li>\n</ul>"}],"description":{"full":"<p>导航到新的页面时触发</p>","summary":"<p>导航到新的页面时触发</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":361,"codeStart":367},{"tags":[{"type":"callback","string":"onErrorNavigator","html":"<p>onErrorNavigator</p>"},{"type":"param","string":"{object} nextState - 页面路由信息，参见[react-router3 route-onEnter函数]()","name":"nextState","description":"<ul>\n<li>页面路由信息，参见<a href=\"\">react-router3 route-onEnter函数</a></li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{function} replace - 调用后可重定向路径的函数，参见[react-router3 route-onEnter函数]()","name":"replace","description":"<ul>\n<li>调用后可重定向路径的函数，参见<a href=\"\">react-router3 route-onEnter函数</a></li>\n</ul>","types":["function"],"typesDescription":"<code>function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{boolean} - 返回true，将不会触发插件列表中位于其后的插件回调","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li>返回true，将不会触发插件列表中位于其后的插件回调</li>\n</ul>"}],"description":{"full":"<p>导航出错时触发，比如无法匹配的导航路径等问题</p>","summary":"<p>导航出错时触发，比如无法匹配的导航路径等问题</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":368,"codeStart":375},{"tags":[{"type":"callback","string":"onLog","html":"<p>onLog</p>"},{"type":"param","string":"{...*} args - 需要打印的参数列表","name":"args","description":"<ul>\n<li>需要打印的参数列表</li>\n</ul>","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":true},{"type":"return","string":"{boolean} - 返回true，将不会触发插件列表中位于其后的插件回调","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li>返回true，将不会触发插件列表中位于其后的插件回调</li>\n</ul>"}],"description":{"full":"<p>需要打印日志时触发</p>","summary":"<p>需要打印日志时触发</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":376,"codeStart":382},{"tags":[{"type":"callback","string":"onRenderMessage","html":"<p>onRenderMessage</p>"},{"type":"param","string":"{...*} args - 需要打印的参数列表","name":"args","description":"<ul>\n<li>需要打印的参数列表</li>\n</ul>","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":true},{"type":"return","string":"{boolean} - 返回true，将不会触发插件列表中位于其后的插件回调","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li>返回true，将不会触发插件列表中位于其后的插件回调</li>\n</ul>"}],"description":{"full":"<p>当页面上需要render信息，并终止应用时触发</p>","summary":"<p>当页面上需要render信息，并终止应用时触发</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":383,"codeStart":389},{"tags":[{"type":"callback","string":"onNoticeMessage","html":"<p>onNoticeMessage</p>"},{"type":"param","string":"{...*} args - 需要打印的参数列表","name":"args","description":"<ul>\n<li>需要打印的参数列表</li>\n</ul>","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":true},{"type":"return","string":"{boolean} - 返回true，将不会触发插件列表中位于其后的插件回调","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li>返回true，将不会触发插件列表中位于其后的插件回调</li>\n</ul>"}],"description":{"full":"<p>当需要已notice方式显示信息时触发</p>","summary":"<p>当需要已notice方式显示信息时触发</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":390,"codeStart":396}]
[{"tags":[{"type":"copyright","string":"(c) 2016 able99","html":"<p>(c) 2016 able99</p>"},{"type":"author","string":"able99 (8846755@qq.com)","html":"<p>able99 (8846755@qq.com)</p>"},{"type":"license","string":"MIT","html":"<p>MIT</p>"}],"description":{"full":"<p>bnorth solution</p>","summary":"<p>bnorth solution</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1,"codeStart":9,"code":"import jspath from '../utils/jspath'\nimport getUuid from '../utils/uuid';\nimport getOptions from '../utils/getOptions';\nimport { checkObject, checkObjectItem } from '../utils/validator';\n\n\n// actions\n//==================\nconst DataInit = 'DataInit';\nfunction _dataInit(uuid,data){\n  return {\n    type: DataInit,\n    uuid,\n    data,\n  };\n}\nconst DataUpdate = 'DataUpdate';\nfunction _dataUpdate(uuid,data,merge,initData){\n  return {\n    type: DataUpdate,\n    uuid,\n    data,\n    merge,\n    initData,\n  };\n}\nlet _dataClear = (uuid)=>(app)=>{\n  let state = app.getState('data',{});\n  delete state.datas[uuid];\n}\n\n// action state class\n//==================","ctx":false},{"tags":[{"type":"class","string":"","html":""},{"type":"example","string":"**使用**\n// container\ncontainer.states.data = app.actionStates.data({});\n// page - 使用数据\nthis.props.state_data\n// page - 修改数据\nthis.props.states.data.setValue('x',xxx);\n**hook**\n参见Browser hook说明","html":"<p><strong>使用</strong><br />\n// container<br />\ncontainer.states.data = app.actionStates.data({});<br />\n// page - 使用数据<br />\nthis.props.state_data<br />\n// page - 修改数据<br />\nthis.props.states.data.setValue('x',xxx);<br />\n<strong>hook</strong><br />\n参见Browser hook说明</p>"}],"description":{"full":"<p>为app 扩展state 类型，提供页面数据的管理</p>","summary":"<p>为app 扩展state 类型，提供页面数据的管理</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":false,"line":42,"codeStart":56,"code":"class ActionStateData{\n  static maps = {};\n\n  constructor(app, uuid, options){\n    this.app = app;\n    this.uuid = uuid;\n    this.options = options;\n    this.options.defaultData = this.options.defaultData||{};\n    this.options.initData = this.options.initData || this.options.defaultData;\n\n    ActionStateData.maps[uuid] = this;\n  }\n\n  // interface\n  // -------------------------\n  get data() {\n    let state = this.app.getState('data',{});\n    return (state.datas && state.datas[this.uuid]) || this.options.initData;\n  }\n\n  get state() { //bnorth use\n    return this.data;\n  }\n  get states() { //bnorth use\n    return null;\n  }\n\n  init(data, merge=false) {\n    try{\n      let originData = this.data;\n      data = data||this.options.defaultData;\n      let changeData = merge?Object.assign({},this.options.initData,data):data;\n\n      changeData = this.onWillChange(changeData,originData)||changeData||this.options.defaultData;\n      this.app.actions._dataInit(this.uuid, changeData);\n      this.onDidChange(changeData,originData);\n    }catch(e){\n      this.app.errorNotice(e);\n    }\n  }\n\n  update(data, key=null, merge=true) {\n    try{\n      let originData = this.data;\n      let changeData = data||this.options.defaultData;\n\n      changeData = this.onWillChange(changeData,originData,key)||changeData||this.options.defaultData;\n      let invalidate = key&&this.checkChangeItem(key, changeData);\n      this.app.actions._dataUpdate(this.uuid, invalidate?originData:changeData, merge, this.options.initData);\n      if(!invalidate)this.onDidChange(changeData,originData,key);\n      return true;\n    }catch(e){\n      this.app.errorNotice(e);\n      return false;\n    }\n  }\n\n  getValue(key) {\n    return jspath.getValue(this.data, key);\n  }\n\n  setValue(key, value) {\n    if(!key) return false;\n    let originData = this.data;\n    let changeData = jspath.setValue(Object.assign({}, originData), key, value);\n\n    return this.update(changeData, key);\n  }\n\n  clear(onlyData){\n    this.app.actions._dataClear(this.uuid);\n  }\n\n  // validate\n  // ----------------------\n  validate(keys){\n    if(!this.options.rules) return false;\n\n    let rules={};\n    if(Array.isArray(keys)){\n      keys.forEach((v)=>{\n        rules[v] = this.options.rules[v];\n      });\n    }else if(typeof(keys)==='string') {\n      rules[keys] = this.options.rules[keys];\n    }else{\n      rules = this.options.rules;\n    }\n\n    return checkObject(this.data, rules, {checkErrorMessage: this.options.checkErrorMessage});\n  }\n\n  checkChangeItem(key, data) {\n    if(!key||!this.options.rules||!this.options.checkOnInputKeys||this.options.checkOnInputKeys.indexOf(key)<0) return false;\n    let ret = checkObjectItem(data, key, this.options.rules[key], {checkErrorMessage:this.options.checkErrorMessage});\n\n    if(ret){\n      if(this.options.noticeChangeError) this.onChangeError(ret, key);\n      return ret;\n    }else{\n      return null;\n    }\n  }\n\n  // event\n  //----------------------------------\n  onStart() { //bnorth use\n    if(!this.options.updateOnStart) return;\n    this.update();\n  }\n\n  onResume() { //bnorth use\n    if(!this.options.updateOnResume) return;\n    this.update();\n  }\n\n  onStop() { //bnorth use\n    if(this.options.clearOnStop===false) return;\n    this.clear();\n  }\n\n  onWillChange(originData, changeData, key) { \n    return this.options.onWillChange&&this.options.onWillChange(originData, changeData, key);\n  }\n\n  onDidChange(originData, changeData, key) { \n    return this.options.onDidChange&&this.options.onDidChange(originData, changeData, key);\n  }\n\n  onChangeError(message, field){\n    if(this.options.noticeChangeError)this.app.errorNotice(message);\n  }\n}\n\n\n// reducer\n//==================\nexport function reducerData(\n  state = {\n    uuid: null,\n    datas: {},\n  }, \n  action\n) {\n  switch (action.type) {\n  case DataInit:\n    return Object.assign({}, state, {\n      uuid: action.uuid,\n      datas: Object.assign({}, state.datas, {\n        [action.uuid]: Array.isArray(action.data)?Array.from(action.data):action.data,\n      }),\n    });\n\n  case DataUpdate:\n    let data = null;\n    if(action.merge){\n      if(Array.isArray(action.data)){\n        data = Array.from(state.datas[action.uuid]||action.initData);\n        data = data.concat(action.data);\n      }else{\n        data = Object.assign({}, state.datas[action.uuid]||action.initData, action.data);\n      }\n    }else{\n      data = Array.from(action.data);\n    }\n    return Object.assign({}, state, {\n      uuid: action.uuid,\n      datas: Object.assign({}, state.datas, {\n        [action.uuid]:data,\n      }),\n    });\n\n  default:\n    return state;\n  }\n}\n\n\n//==================\n// export\n//==================\nexport default {\n  init(app) {\n    app.actionStates.data = function(options,uuid) {\n      if(typeof(options)==='string') uuid=options;\n      uuid = uuid||getUuid();\n      if(ActionStateData.maps[uuid]) return ActionStateData.maps[uuid];\n      return new ActionStateData(app, uuid, getOptions(options));\n    }\n  },\n\n  onCreateStoreBefore(app) {\n    Object.assign(app.actions,{\n      _dataInit,\n      _dataUpdate,\n      _dataClear,\n    });\n\n    app.reducers.data = reducerData;\n  },\n}","ctx":{"type":"class","constructor":"ActionStateData","cons":"ActionStateData","name":"ActionStateData","extends":"","string":"new ActionStateData()"}}]
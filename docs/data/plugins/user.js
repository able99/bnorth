[{"tags":[{"type":"copyright","string":"(c) 2016 able99","html":"<p>(c) 2016 able99</p>"},{"type":"author","string":"able99 (8846755@qq.com)","html":"<p>able99 (8846755@qq.com)</p>"},{"type":"license","string":"MIT","html":"<p>MIT</p>"}],"description":{"full":"<p>bnorth solution</p>","summary":"<p>bnorth solution</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1,"codeStart":9,"code":"import md5 from '../utils/md5';","ctx":false},{"tags":[{"type":"class","string":"","html":""}],"description":{"full":"<p>为app 提供用户信息与鉴权的能力扩展<br />\n<strong>插件</strong> 该类为插件类扩展了App 的能力<br />\napp.User: 该类的原型<br />\napp.user: 该类的实例</p>","summary":"<p>为app 提供用户信息与鉴权的能力扩展<br />\n<strong>插件</strong> 该类为插件类扩展了App 的能力<br />\napp.User: 该类的原型<br />\napp.user: 该类的实例</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":false,"line":12,"codeStart":19,"code":"class User {\n  constructor(app){\n    this.app = app;\n    this._userUpdateListeners = new Set();\n  }\n\n  // user state\n  //===========\n  stateSuccess (result){\n    let user = this.storageLoad();\n    this.storageSave(Object.assign(user||{},result||{}));\n  }\n  stateError (error){\n    \n  }\n  getInfoUrl() {\n    let authUrl = this.app.config.login.urls['info'];;\n    return this.app.config.urls.base+this.app.config.urls.api+authUrl;\n  }\n  state(){\n    return this.app.actionStates.request&&this.app.actionStates.request({\n      updateOnStart: true,\n      resource: this.getInfoUrl(),\n      onWillUpdate:()=>this.isLogin(),\n      onWillChange:(result)=>{\n        this.stateSuccess(result);\n      },\n      onChangeError:(error)=>{\n        this.stateError(error);\n      },\n    },\"user\");\n  }\n\n  // user storage\n  //===========\n  storageLoad(){\n    return this.app.storage&&this.app.storage.getObj(this.app.config.keys.user);\n  }\n  storageSave(user){\n    return this.app.storage&&this.app.storage.setObj(this.app.config.keys.user,user);\n  }\n  storageClear(){\n    return this.app.storage&&this.app.storage.remove(this.app.config.keys.user);\n  }\n\n  // user info\n  //===========\n  getToken(){\n    let user = this.storageLoad();\n    return user?user.token:\"\";\n  }\n  load(){\n    return this.storageLoad()||{};\n  }\n  save(user){\n    return this.storageSave(user);\n  }\n  clear(){\n    this.state().clear();\n    this.storageClear();\n  }\n\n\n  // user handle\n  //===========\n  onUserUpdate(user){\n    if(!user)return {};\n    for(let listener of this._userUpdateListeners) {\n      listener(user);\n    }\n  }\n  addListener(listener){\n    this._userUpdateListeners.add(listener);\n  }\n  removeListener(listener){\n    this._userUpdateListeners.remove(listener);\n  }\n\n  // user login\n  //===========\n  getLoginUrl(data,options) {\n    if(typeof(options)==='string') return options;\n    \n    let { type=this.app.config.login.types[0].type } = options||{};\n    let authUrl = this.app.config.login.urls[type];\n    return this.app.config.urls.base+this.app.config.urls.api+authUrl;\n  }\n  getLoginMethod(data,options) {\n    return 'post';\n  }\n  getLoginData(data,options) {\n    let { fields, data:adata={} } = options||{};\n    let ret = {};\n\n    if(fields){\n      fields.forEach(v=>{\n        ret[v.type] = v.crypto?this.getPasswordCrypto(data[v.type]):data[v.type];\n      })\n    }else{\n      ret = data;\n    }\n\n    return Object.assign(ret, adata||{});\n  }\n  loginBefore(data,options) {\n    return [data, options];\n  }\n  loginRequest(data, options) {\n    let { type, fields, success, data:adata, ...params } = options||{};\n\n    this.app.actions.requestSubmit({\n      resource: this.getLoginUrl(data,options),\n      method: this.getLoginMethod(data,options),\n      data: this.getLoginData(data,options),\n      noAuth: true,\n      success:(result)=>{\n        if(success&&success(result, options)) return;\n        this.onUserUpdate(result);\n        result = this.loginAfter(result,options)||result;\n        this.loginNavigate(result,options);\n      },\n      ...params,\n    });\n  }\n  loginSuccess(result, options) {\n    let { success } = options||{};\n\n    if(success&&success(result, options)) return;\n    this.onUserUpdate(result);\n    result = this.loginAfter(result,options)||result;\n    this.loginNavigate(result,options);\n  }\n  loginAfter(result,options) {\n    this.save(result);\n  }\n  loginNavigate(result,options) {\n    this.app.navigator&&this.app.navigator.recall();\n  }\n  login(data,options) {\n    this.loginRequest(...this.loginBefore(data, options));\n  }\n\n  // user logout\n  //===========\n  getLogoutUrl(data, options) {\n    let url = this.app.config.login.urls['logout']||'';\n    return url.indexOf('http')>=0?url:this.app.config.urls.base+this.app.config.urls.api+url;\n  }\n  getLogoutMethod(data, options) {\n    return this.app.config.login.logoutMethod||'DELETE';\n  }\n  getLogoutData(data, options) {\n    return data||this.app.config.login.logoutData||{};\n  }\n  getPasswordCrypto(password) {\n    return md5(password);\n  }\n  logoutNetwork(data, options){\n     this.app.actions.requestSubmit({\n      resource: this.getLogoutUrl(data, options),\n      method: this.getLogoutMethod(data, options),\n      data:this.getLogoutData(data, options),\n      ...options||{},\n    });\n  }\n  logoutAfter(data, options){\n    this.clear();\n  }\n  logoutNavigate(data, options){\n    if(this.app.navigator){\n      this.app.config.login.logoutToLoginOrHome?this.app.navigator.goLogin():this.app.navigator.goHome();\n    }\n  }\n  logout(data, options){\n    this.logoutNetwork(data, options);\n    this.logoutAfter(data, options);\n    this.onUserUpdate(null);\n    this.logoutNavigate(data, options);\n  }\n\n  // user op\n  //===========\n  update(){\n    this.state().update();\n  }\n  isLogin(){\n    let user = this.load();\n    return Boolean(user&&user.token);\n  }\n  getId(){\n    let user = this.load();\n    return user&&user._id;\n  }\n  isAdmin(){\n    let user = this.load();\n    return user && user._role_id;\n  }\n  checkLogin(force=false, replace=true){\n    let ret = this.isLogin();\n    if(!ret)this.toLogin(force, replace);\n    return ret;\n  }\n  toLogin(force=false, replace=true){\n    if(force){\n      this.app.navigator&&this.app.navigator.goLogin(replace);\n    }else{\n      this.app.actions.noticeModal({\n        closeBtn: false,\n        content: \"请登录后操作\",\n        role: \"confirm\",\n        onAction: (confirm)=>{\n          if(confirm){\n            this.app.navigator&&this.app.navigator.goLogin(replace);\n          }\n        },\n      });\n    }\n  }\n}\n\n\nexport default {\n  name: 'user',\n  dependence: ['request', 'navigator', 'storage'],\n\n  init(app) {\n    app.User = User;\n    app.user = new User(app);\n  },\n\n  onNavigating(app, nextState) {\n    if(nextState.routes.find(v=>v.checkLogin)&&!app.user.isLogin()){\n      return typeof(app.config.paths.Login)==='string'?app.config.paths.Login:app.config.paths.Login.path;\n    }\n  },\n}","ctx":{"type":"class","constructor":"User","cons":"User","name":"User","extends":"","string":"new User()"}}]
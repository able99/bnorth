[{"tags":[{"type":"copyright","string":"(c) 2016 able99","html":"<p>(c) 2016 able99</p>"},{"type":"author","string":"able99 (8846755@qq.com)","html":"<p>able99 (8846755@qq.com)</p>"},{"type":"license","string":"MIT","html":"<p>MIT</p>"}],"description":{"full":"<p>bnorth solution</p>","summary":"<p>bnorth solution</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1,"codeStart":9,"code":"import Url from 'url-parse';\n\n\nlet fetchTimeout = function(app, input, opts){\n  return new Promise(function(resolve, reject){\n    var timeoutId = setTimeout(function(){\n      reject(new Error(\"fetch timeout\"))\n    }, opts.timeout||90000);\n    app.verbose('network request:', input, opts);\n    fetch(input, opts).then(\n      res=>{\n        clearTimeout(timeoutId);\n        app.verbose('network response:', input, opts, res);\n        resolve(res)\n      },\n      err=>{\n        clearTimeout(timeoutId);\n        app.verbose('network response error:', input, opts, err);\n        reject(err)\n      }\n    )\n  })\n}","ctx":false},{"tags":[{"type":"class","string":"","html":""}],"description":{"full":"<p>网络访问</p>","summary":"<p>网络访问</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":false,"line":34,"codeStart":38,"code":"class Network {\n  constructor(app) {\n    this.app = app;\n  }\n  //==================\n  // cache\n  //==================\n  clearCache(){\n    this.app.storage&&this.app.storage.clear(\"^bnorth_netcache\");\n  }\n  saveCache(item,data){\n    this.app.storage&&this.app.storage.saveObj(\"bnorth_netcache_\"+item,data);\n  }\n  getCache(item){\n    return this.app.storage&&this.app.storage.getObj(\"bnorth_netcache_\"+item);\n  }\n  getCacheFetchKey(options){\n    return options.resource;\n  }\n  getCacheOperateKey(options){\n    return options.resource;\n  }\n\n  //==================\n  // format\n  //==================\n  formatFetchResult(result){\n    return result;\n  }\n  formatOperateResult(result){\n    return result;\n  }\n\n  //==================\n  // error handle\n  //==================\n  handleStatus(status,isFetch,options){\n    switch(status){\n      case 401:\n      this.app.user&&this.app.user.toLogin(null, true);\n        return true;\n      default:\n        return false;\n    }\n  }\n  handleResult(result,isFetch,options){\n    return false;\n  }\n\n  //==================\n  // param\n  //==================\n  //authorization\n  paramAuthorization(options){\n    if(options.noAuth)return {};\n    return { \n      \"authorization\": (this.app.user&&this.app.user.getToken())||'',\n    };\n  }\n  //header\n  paramFetchHeader(options){\n    return {};\n  }\n  paramOperateHeader(options){\n    return {};\n  }\n  //url\n  paramFetchUrl(options){\n    let resource = typeof(options.resource)==='function'?options.resource():options.resource;\n    resource = ((resource.indexOf(\"http\")===0||resource.indexOf(\"//\")===0)?'':(this.app.config.urls.base+this.app.config.urls.api))+resource;\n    let uo = Url(resource,true);\n\n    if(this.paramFetchMethod(options).toLowerCase()==='get'){\n      Object.assign(uo.query, this.paramFetchBodyPre(options), options.query||{});\n    }else{\n      Object.assign(uo.query, options.query||{});\n    }\n\n    if(options.params){\n      //todo\n    }\n    \n    return uo.toString();\n  }\n  paramOperateUrl(options){\n    let resource = typeof(options.resource)==='function'?options.resource():options.resource;\n    resource = ((resource.indexOf(\"http\")===0||resource.indexOf(\"//\")===0)?'':(this.app.config.urls.base+this.app.config.urls.api))+resource;\n    let uo = Url(resource,true);\n\n    Object.assign(uo.query, options.query||{});\n\n    if(options.params){\n      //todo\n    }\n\n    return uo.toString();\n  }\n  //method\n  paramFetchMethod(options){\n    return options.method||\"get\";\n  }\n  paramOperateMethod(options){\n    return options.method||\"POST\";\n  }\n  //body\n  paramFetchBodyPre(options){\n    return (typeof(options.data)==='function'?options.data():options.data)||{};\n  }\n  paramFetchBody(options){\n    return JSON.stringify(this.paramFetchBodyPre(options));\n  }\n  paramOperateBodyPre(options){\n    return (typeof(options.data)==='function'?options.data():options.data)||{}\n  }\n  paramOperateBody(options){\n    return JSON.stringify(this.paramOperateBodyPre(options));\n  }\n  //contenttype\n  paramFetchContentType(options){\n    return {};\n  }\n  paramOperateContentType(options){\n    return {\n      \"Content-Type\": \"application/json\",\n    }\n  }\n\n  //==================\n  // main if\n  //==================","ctx":{"type":"class","constructor":"Network","cons":"Network","name":"Network","extends":"","string":"new Network()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{object} options - 参数对象，具体包括：<br />\n**resource**\n**data**\n**query**\n**params**\n**methods**","name":"options","description":"<ul>\n<li>参数对象，具体包括：<br /> <strong>resource</strong><br />\n<strong>data</strong><br />\n<strong>query</strong><br />\n<strong>params</strong><br />\n<strong>methods</strong></li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Promise} -","types":["Promise"],"typesDescription":"<a href=\"Promise.html\">Promise</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li></li>\n</ul>"}],"description":{"full":"<p>获取网络数据</p>","summary":"<p>获取网络数据</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":168,"codeStart":179,"code":"fetch(options={}){\n  options.resource = options.resource||\"\";\n  let fetchScope = {};\n  let fetchUrl = this.paramFetchUrl(options);\n  let fetchOption = {\n    method: this.paramFetchMethod(options),\n    headers: {\n      ...this.paramAuthorization(options),\n      ...this.paramFetchHeader(options),\n      ...this.paramFetchContentType(options),\n    },\n    credentials: 'include',\n  }\n  if(fetchOption.method&&fetchOption.method.toString().toLowerCase()!=='get'){\n    fetchOption.body = this.paramFetchBody(options);\n  }\n\n  return fetchTimeout(app, fetchUrl,fetchOption)\n  .then(\n    (res) => {\n      fetchScope.res = res;\n      return res.json();\n    },\n    (error) => {\n      return Promise.reject(error);\n    }\n  )\n  .then(\n    (result) => {\n      if(fetchScope.res && (fetchScope.res.ok||(fetchScope.res.status>=200&&fetchScope.res.status<300))) {\n        let handle = this.handleResult(result,true,options,fetchScope.res);\n        if(handle) return Promise.reject(handle===true?null:handle);\n\n        return result;\n      }else{\n        let handle = this.handleStatus(fetchScope.res.status,true,options,result,fetchScope.res);\n        if(handle) return Promise.reject(handle===true?null:handle);\n\n        return Promise.reject(Object.assign({code:fetchScope.res.status, message:fetchScope.res.statusText||this.app.config.strings.networkError},result));\n      }\n    },\n    (error) => {\n      if(!fetchScope.res) {\n        error.message = this.app.config.strings.networkError;\n        return Promise.reject(error);\n      }\n\n      let handle = this.handleStatus(fetchScope.res.status,true,options,null, fetchScope.res);\n      if(handle) return Promise.reject(handle===true?null:handle);\n\n      return Promise.reject({code:fetchScope.res.status, message:fetchScope.res.statusText||this.app.config.strings.networkError});\n    }\n  )\n  .then(\n    (result)=>{\n      result = this.formatFetchResult(result);\n      if(this.app.config.networkCache){this.saveCache(this.getCacheFetchKey(options),result)}\n      return result;\n    },\n    (error)=>{\n      if(this.app.config.networkCache){\n        let cache = this.getCache(this.getCacheFetchKey(options));\n        if(cache){ return Promise.resolve(cache); }\n      }else{\n        return Promise.reject(error);\n      }\n    }\n  );\n}","ctx":{"type":"method","constructor":"Network","cons":"Network","name":"fetch","string":"Network.prototype.fetch()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{object} options - 参数对象，具体包括：<br />\n**resource**\n**data**\n**query**\n**params**\n**methods**","name":"options","description":"<ul>\n<li>参数对象，具体包括：<br /> <strong>resource</strong><br />\n<strong>data</strong><br />\n<strong>query</strong><br />\n<strong>params</strong><br />\n<strong>methods</strong></li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Promise} -","types":["Promise"],"typesDescription":"<a href=\"Promise.html\">Promise</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li></li>\n</ul>"}],"description":{"full":"<p>提交网络数据</p>","summary":"<p>提交网络数据</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":249,"codeStart":260,"code":"operate(options={}){\n  options.resource = options.resource||\"\";\n  let fetchScope = {};\n  let fetchUrl = this.paramOperateUrl(options);\n  let fetchOption = {\n    method: this.paramOperateMethod(options),\n    headers: {\n      ...this.paramAuthorization(options),\n      ...this.paramOperateHeader(options),\n      ...(options.data && options.data instanceof FormData)?{}:this.paramOperateContentType(options),\n    },\n    credentials: 'include',\n  }\n  if(fetchOption.method&&fetchOption.method.toString().toLowerCase()!=='get'){\n    let body = this.paramOperateBodyPre(options);\n    fetchOption.body = (body instanceof FormData)?body:this.paramOperateBody(options);\n  }\n\n  return fetchTimeout(app, fetchUrl,fetchOption)\n  .then(\n    (res) => {\n      fetchScope.res = res;\n      return res.json();\n    },\n    (error) => {\n      return Promise.reject(error);\n    }\n  )\n  .then(\n    (result) => {\n      if(fetchScope.res && (fetchScope.res.ok||(fetchScope.res.status>=200&&fetchScope.res.status<300))) {\n        let handle = this.handleResult(result,false,options,fetchScope.res);\n        if(handle) return Promise.reject(handle===true?null:handle);\n\n        return result;\n      }else{\n        let handle = this.handleStatus(fetchScope.res.status,false,options,result, fetchScope.res);\n        if(handle) return Promise.reject(handle===true?null:handle);\n\n        return Promise.reject(Object.assign({code:fetchScope.res.status, message:fetchScope.res.statusText||this.app.config.strings.networkError},result));\n      }\n    },\n    (error) => {\n      if(!fetchScope.res) {\n        error.message = this.app.config.strings.networkError;\n        return Promise.reject(error);\n      }\n      \n      let handle = this.handleStatus(fetchScope.res.status,false,options,null,fetchScope.res);\n      if(handle) return Promise.reject(handle===true?null:handle);\n\n      return Promise.reject({code:fetchScope.res.status, message:fetchScope.res.statusText||this.app.config.strings.networkError});\n    }\n  )\n  .then(\n    (result) => {\n      return this.formatFetchResult(result);\n    },\n    (error) => {\n      return Promise.reject(error);\n    }\n  );\n}\n\n}","ctx":{"type":"method","constructor":"Network","cons":"Network","name":"operate","string":"Network.prototype.operate()"}},{"tags":[{"type":"class","string":"networkPlugin","html":"<p>networkPlugin</p>"},{"type":"property","string":"{class} app.Network - Network 类","name":"app.Network","description":"<ul>\n<li>Network 类</li>\n</ul>","types":["class"],"typesDescription":"<a href=\"class.html\">class</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{Network} app.network - Network 类实例","name":"app.network","description":"<ul>\n<li>Network 类实例</li>\n</ul>","types":["Network"],"typesDescription":"<a href=\"Network.html\">Network</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p><strong>plugin</strong> name: network dependence: none<br />\n提供网络访问的能力扩展</p>","summary":"<p><strong>plugin</strong> name: network dependence: none<br />\n提供网络访问的能力扩展</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":false,"line":327,"codeStart":334,"code":"export default {\n  name: 'network',\n\n  init(app) {\n    app.Network = Network;\n    app.network = new Network(app);\n  }\n}","ctx":false}]
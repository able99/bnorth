[{"tags":[{"type":"copyright","string":"(c) 2016 able99","html":"<p>(c) 2016 able99</p>"},{"type":"author","string":"able99 (8846755@qq.com)","html":"<p>able99 (8846755@qq.com)</p>"},{"type":"license","string":"MIT","html":"<p>MIT</p>"}],"description":{"full":"<p>bnorth solution</p>","summary":"<p>bnorth solution</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1,"codeStart":9,"code":"import { ActionState } from '../app/container';\nimport getOptions from '../utils/getOptions';\nimport getUuid from '../utils/uuid';\n\n\n// action state \n// -----------------------------","ctx":false},{"tags":[{"type":"class","string":"ActionStateRequestOptions","html":"<p>ActionStateRequestOptions</p>"},{"type":"property","string":"{object|array} [defaultData={}] - 默认数据 ","name":"[defaultData={}]","description":"<ul>\n<li>默认数据</li>\n</ul>","types":["object","array"],"typesDescription":"<code>object</code>|<code>array</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{object|array} [initData={}] - 初始化数据 ","name":"[initData={}]","description":"<ul>\n<li>初始化数据</li>\n</ul>","types":["object","array"],"typesDescription":"<code>object</code>|<code>array</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{} append","name":"{}","description":"<p>append</p>","types":[],"typesDescription":"","variable":false,"nonNullable":false,"nullable":false,"optional":false},{"type":"property","string":"{} appendField","name":"{}","description":"<p>appendField</p>","types":[],"typesDescription":"","variable":false,"nonNullable":false,"nullable":false,"optional":false},{"type":"property","string":"{boolean} [updateOnStart=falae] - 是否在container 启动时更新数据","name":"[updateOnStart=falae]","description":"<ul>\n<li>是否在container 启动时更新数据</li>\n</ul>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{boolean} [updateOnResume=falae] - 是否在container 获取焦点时更新数据","name":"[updateOnResume=falae]","description":"<ul>\n<li>是否在container 获取焦点时更新数据</li>\n</ul>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{boolean} [clearOnStop=true] - 是否在container 停止时，清除数据管理器","name":"[clearOnStop=true]","description":"<ul>\n<li>是否在container 停止时，清除数据管理器</li>\n</ul>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{boolean} [trackState=falae] - 是否显示","name":"[trackState=falae]","description":"<ul>\n<li>是否显示</li>\n</ul>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{boolean} [blocking=] - 获取中时显示阻塞式还是非阻塞式的加载中指示","name":"[blocking=]","description":"<ul>\n<li>获取中时显示阻塞式还是非阻塞式的加载中指示</li>\n</ul>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{boolean} [notice=true] - 出错时是否显示错误信息 ","name":"[notice=true]","description":"<ul>\n<li>出错时是否显示错误信息</li>\n</ul>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{string} [noticeTheme='alert'] - 错误提示的主题","name":"[noticeTheme='alert']","description":"<ul>\n<li>错误提示的主题</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>网络请求管理器的构造参数</p>","summary":"<p>网络请求管理器的构造参数</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":false,"line":16,"codeStart":31},{"tags":[{"type":"callback","string":"onWillUpdate","html":"<p>onWillUpdate</p>"},{"type":"param","string":"{ActionStateRequestOptions} options - 本次请求的配置信息","name":"options","description":"<ul>\n<li>本次请求的配置信息</li>\n</ul>","types":["ActionStateRequestOptions"],"typesDescription":"<a href=\"ActionStateRequestOptions.html\">ActionStateRequestOptions</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{boolean} - 返回false 终止本次请求","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li>返回false 终止本次请求</li>\n</ul>"}],"description":{"full":"<p>当获取请求数据时触发</p>","summary":"<p>当获取请求数据时触发</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":31,"codeStart":37},{"tags":[{"type":"callback","string":"onWillChange","html":"<p>onWillChange</p>"},{"type":"param","string":"{object|array} result - 请求结果","name":"result","description":"<ul>\n<li>请求结果</li>\n</ul>","types":["object","array"],"typesDescription":"<code>object</code>|<code>array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{object|array} - 如果返回则替换为返回的数据","types":["object","array"],"typesDescription":"<code>object</code>|<code>array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li>如果返回则替换为返回的数据</li>\n</ul>"}],"description":{"full":"<p>数据将要改变时触发</p>","summary":"<p>数据将要改变时触发</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":37,"codeStart":43},{"tags":[{"type":"callback","string":"onDidChange","html":"<p>onDidChange</p>"},{"type":"param","string":"{object|array} result - 请求结果","name":"result","description":"<ul>\n<li>请求结果</li>\n</ul>","types":["object","array"],"typesDescription":"<code>object</code>|<code>array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>数据修改后触发</p>","summary":"<p>数据修改后触发</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":43,"codeStart":48},{"tags":[{"type":"callback","string":"onChangeError","html":"<p>onChangeError</p>"},{"type":"param","string":"{Error|string} error - 错误信息","name":"error","description":"<ul>\n<li>错误信息</li>\n</ul>","types":["Error","string"],"typesDescription":"<code>Error</code>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{object|array} result - 请求结果","name":"result","description":"<ul>\n<li>请求结果</li>\n</ul>","types":["object","array"],"typesDescription":"<code>object</code>|<code>array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":48,"codeStart":53},{"tags":[{"type":"callback","string":"onSuccess","html":"<p>onSuccess</p>"}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":53,"codeStart":56},{"tags":[{"type":"callback","string":"onError","html":"<p>onError</p>"}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":56,"codeStart":59},{"tags":[{"type":"callback","string":"onUploadProgress","html":"<p>onUploadProgress</p>"}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":59,"codeStart":62},{"tags":[{"type":"callback","string":"onDownloadProgress","html":"<p>onDownloadProgress</p>"}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":62,"codeStart":65},{"tags":[{"type":"class","string":"","html":""}],"description":{"full":"<p>提供网络请求与网络请求数据的管理</p>","summary":"<p>提供网络请求与网络请求数据的管理</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":false,"line":66,"codeStart":70,"code":"class ActionStateRequest extends ActionState {\n  static stateName = 'request';","ctx":{"type":"class","constructor":"ActionStateRequest","cons":"ActionStateRequest","name":"ActionStateRequest","extends":"ActionState","string":"new ActionStateRequest()"}},{"tags":[{"type":"param","string":"{App} app - App 单实例","name":"app","description":"<ul>\n<li>App 单实例</li>\n</ul>","types":["App"],"typesDescription":"<a href=\"App.html\">App</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{string} uuid - 唯一id","name":"uuid","description":"<ul>\n<li>唯一id</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{ActionStateRequestOptions|NetworkOptions} options - 请求参数与网络请求底层API参数","name":"options","description":"<ul>\n<li>请求参数与网络请求底层API参数</li>\n</ul>","types":["ActionStateRequestOptions","NetworkOptions"],"typesDescription":"<a href=\"ActionStateRequestOptions.html\">ActionStateRequestOptions</a>|<a href=\"NetworkOptions.html\">NetworkOptions</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":73,"codeStart":79,"code":"constructor(app, uuid, options){\n  super(app, uuid);","ctx":{"type":"constructor","constructor":"ActionStateRequest","cons":"ActionStateRequest","name":"constructor","string":"ActionStateRequest.prototype.constructor()"}},{"tags":[{"type":"property","string":"{ActionStateRequestOptions|NetworkOptions} options - 请求的参数","name":"options","description":"<ul>\n<li>请求的参数</li>\n</ul>","types":["ActionStateRequestOptions","NetworkOptions"],"typesDescription":"<a href=\"ActionStateRequestOptions.html\">ActionStateRequestOptions</a>|<a href=\"NetworkOptions.html\">NetworkOptions</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":82,"codeStart":85,"code":"this.options = options;\nthis.options.defaultData = this.options.defaultData||{};\nthis.options.initData = this.options.initData || this.options.defaultData;\n  }\n\n  // interface\n  // -------------------------","ctx":{"type":"property","receiver":"this","name":"options","value":"options","string":"this.options"}},{"tags":[{"type":"property","string":"{*} data - 返回请求的数据","name":"data","description":"<ul>\n<li>返回请求的数据</li>\n</ul>","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"readonly","string":"","html":""}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":92,"codeStart":96,"code":"get data() {\n  let state = this.app.getState('request',{});\n  return (state.fetchResult && state.fetchResult[this.uuid] && state.fetchResult[this.uuid].result)||this.options.initData;\n}","ctx":{"type":"property","name":"data","string":"data"}},{"tags":[{"type":"property","string":"{*} state - return data for container state data","name":"state","description":"<ul>\n<li>return data for container state data</li>\n</ul>","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"readonly","string":"","html":""},{"type":"override","string":"","html":""}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":true,"line":101,"codeStart":106,"code":"get state() { \n  return (this.data&&this.data.data)||this.options.defaultData;\n}","ctx":{"type":"property","name":"state","string":"state"}},{"tags":[{"type":"property","string":"{object} state - return data for container state object","name":"state","description":"<ul>\n<li>return data for container state object</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"readonly","string":"","html":""},{"type":"override","string":"","html":""}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":true,"line":110,"codeStart":115,"code":"get states() { \n  return !this.options.trackState?null:{\n    state: this._getState(),\n  };\n}","ctx":{"type":"property","name":"states","string":"states"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{ActionStateRequestOptions|NetworkOptions} [options] - 本次请求的参数，为空使用创建时的参数","name":"[options]","description":"<ul>\n<li>本次请求的参数，为空使用创建时的参数</li>\n</ul>","types":["ActionStateRequestOptions","NetworkOptions"],"typesDescription":"<a href=\"ActionStateRequestOptions.html\">ActionStateRequestOptions</a>|<a href=\"NetworkOptions.html\">NetworkOptions</a>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{boolean} [append=false] - 是否是追加数据还是替换之前数据","name":"[append=false]","description":"<ul>\n<li>是否是追加数据还是替换之前数据</li>\n</ul>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":121,"codeStart":126,"code":"update(aoptions={},append=null){\n  let options = Object.assign( {},\n    getOptions(this.options),\n    getOptions(aoptions),\n    (append===true||append===false)?{append}:{},\n  )\n  if(this.options.onWillUpdate && this.options.onWillUpdate(options)===false) return;\n  this.app.actions.request(options, true, this.uuid);\n}","ctx":{"type":"method","name":"update","string":"update()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{*} data - 数据","name":"data","description":"<ul>\n<li>数据</li>\n</ul>","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{boolean} [append=false] - 是否是追加数据还是替换之前数据","name":"[append=false]","description":"<ul>\n<li>是否是追加数据还是替换之前数据</li>\n</ul>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>用户设置数据，模拟请求返回的数据</p>","summary":"<p>用户设置数据，模拟请求返回的数据</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":136,"codeStart":142,"code":"set(data, append) {\n  app.actions.requestFetchSuccess(this.uuid,data||{},this.options.initData,append!==undefined?append:this.options.append,this.options.appendField);\n}","ctx":{"type":"method","name":"set","string":"set()"}},{"tags":[{"type":"method","string":"","html":""}],"description":{"full":"<p>清除网络数据管理器</p>","summary":"<p>清除网络数据管理器</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":146,"codeStart":150,"code":"clear(){\n  this.app.actions._requestFetchClear(this.uuid);\n  ActionStateRequest.deleteInstance[this.uuid];\n}\n\n// state","ctx":{"type":"method","name":"clear","string":"clear()"}},{"tags":[{"type":"method","string":"","html":""}],"description":{"full":"<p>return network state data</p>","summary":"<p>return network state data</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":true,"line":156,"codeStart":160,"code":"_getState() {\n  let state = this.app.getState('request',{});\n  return (state.fetchResult && state.fetchResult[this.uuid])||{};\n}","ctx":{"type":"method","name":"_getState","string":"_getState()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"return","string":"{boolean} - 是否成功完成","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li>是否成功完成</li>\n</ul>"}],"description":{"full":"<p>返回请求是否成功完成</p>","summary":"<p>返回请求是否成功完成</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":165,"codeStart":170,"code":"getReady(){\n  let state = this._getState();\n  return state.fetching === false && !state.invalid;\n}","ctx":{"type":"method","name":"getReady","string":"getReady()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"return","string":"{Error|string} - 错误信息或者null","types":["Error","string"],"typesDescription":"<code>Error</code>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li>错误信息或者null</li>\n</ul>"}],"description":{"full":"<p>返回请求的错误信息</p>","summary":"<p>返回请求的错误信息</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":175,"codeStart":180,"code":"getError(){\n  let state = this._getState();\n  return state.error;\n}\n\n// event\n//----------------------------------","ctx":{"type":"method","name":"getError","string":"getError()"}},{"tags":[{"type":"callback","string":"","html":""}],"description":{"full":"<p>triiger on container start</p>","summary":"<p>triiger on container start</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":true,"line":187,"codeStart":191,"code":"onStart() { //bnorth use\n  if(!this.options.updateOnStart) return;\n  this.update();\n}","ctx":{"type":"method","name":"onStart","string":"onStart()"}},{"tags":[{"type":"callback","string":"","html":""}],"description":{"full":"<p>triiger on container start</p>","summary":"<p>triiger on container start</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":true,"line":196,"codeStart":200,"code":"onResume() { //bnorth use\n  if(!this.options.updateOnResume) return;\n  this.update();\n}","ctx":{"type":"method","name":"onResume","string":"onResume()"}},{"tags":[{"type":"callback","string":"","html":""}],"description":{"full":"<p>triiger on container start</p>","summary":"<p>triiger on container start</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":true,"line":205,"codeStart":209,"code":"onStop() { //bnorth use\n  if(this.options.clearOnStop===false) return;\n  this.clear();\n}","ctx":{"type":"method","name":"onStop","string":"onStop()"}},{"tags":[{"type":"callback","string":"","html":""},{"type":"param","string":"{*} result - network data","name":"result","description":"<ul>\n<li>network data</li>\n</ul>","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{*} - return changed data overrided","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li>return changed data overrided</li>\n</ul>"}],"description":{"full":"<p>triiger on container start</p>","summary":"<p>triiger on container start</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":true,"line":214,"codeStart":220,"code":"onWillChange(...args) { \n  return this.options.onWillChange&&this.options.onWillChange(...args);\n}","ctx":{"type":"method","name":"onWillChange","string":"onWillChange()"}},{"tags":[{"type":"callback","string":"","html":""},{"type":"param","string":"{*} result - network data","name":"result","description":"<ul>\n<li>network data</li>\n</ul>","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>triiger on container start</p>","summary":"<p>triiger on container start</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":true,"line":224,"codeStart":229,"code":"onDidChange(...args) { \n  return this.options.onDidChange&&this.options.onDidChange(...args);\n}","ctx":{"type":"method","name":"onDidChange","string":"onDidChange()"}},{"tags":[{"type":"callback","string":"","html":""},{"type":"param","string":"{Error|string} error - error info","name":"error","description":"<ul>\n<li>error info</li>\n</ul>","types":["Error","string"],"typesDescription":"<code>Error</code>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{*} result - network data","name":"result","description":"<ul>\n<li>network data</li>\n</ul>","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>triiger on network error</p>","summary":"<p>triiger on network error</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":true,"line":233,"codeStart":239,"code":"onChangeError(error, result){\n  this.app.error(error);\n  if(this.options.onChangeError&&this.options.onChangeError(error, result));\n  this.app.actions.noticeMessage(error, {cTheme: 'alert'});\n}","ctx":{"type":"method","name":"onChangeError","string":"onChangeError()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{boolean} show - 是否显示 ","name":"show","description":"<ul>\n<li>是否显示</li>\n</ul>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Error|string} error - 异常信息","name":"error","description":"<ul>\n<li>异常信息</li>\n</ul>","types":["Error","string"],"typesDescription":"<code>Error</code>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{App} app - App 实例","name":"app","description":"<ul>\n<li>App 实例</li>\n</ul>","types":["App"],"typesDescription":"<a href=\"App.html\">App</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{ActionStateRequestOptions|NetworkOptions} options - 请求参数","name":"options","description":"<ul>\n<li>请求参数</li>\n</ul>","types":["ActionStateRequestOptions","NetworkOptions"],"typesDescription":"<a href=\"ActionStateRequestOptions.html\">ActionStateRequestOptions</a>|<a href=\"NetworkOptions.html\">NetworkOptions</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{boolean} isFetch - 是否是获取型","name":"isFetch","description":"<ul>\n<li>是否是获取型</li>\n</ul>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>请求进度条处理函数</p>","summary":"<p>请求进度条处理函数</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":245,"codeStart":254,"code":"static _handleRequesting(show, app, options, isFetch) {\n  if(isFetch){\n    if(options.blocking){\n      app.actions.noticeBlocking(show);\n    }else{\n      app.actions.noticeLoading(show);\n    }\n  }else{\n    if(options.blocking!==false){\n      app.actions.noticeBlocking(show);\n    }\n  }\n}","ctx":{"type":"method","name":"_handleRequesting","string":"_handleRequesting()"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{Error|string} error - 异常信息","name":"error","description":"<ul>\n<li>异常信息</li>\n</ul>","types":["Error","string"],"typesDescription":"<code>Error</code>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{App} app - App 实例","name":"app","description":"<ul>\n<li>App 实例</li>\n</ul>","types":["App"],"typesDescription":"<a href=\"App.html\">App</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{ActionStateRequestOptions|NetworkOptions} options - 请求参数","name":"options","description":"<ul>\n<li>请求参数</li>\n</ul>","types":["ActionStateRequestOptions","NetworkOptions"],"typesDescription":"<a href=\"ActionStateRequestOptions.html\">ActionStateRequestOptions</a>|<a href=\"NetworkOptions.html\">NetworkOptions</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{boolean} isFetch - 是否是获取型","name":"isFetch","description":"<ul>\n<li>是否是获取型</li>\n</ul>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>请求异常显示处理函数</p>","summary":"<p>请求异常显示处理函数</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":268,"codeStart":276,"code":"static _handleError(error, app, options, isFetch) {\n  if(error&&options.notice!==false) app.actions.noticeMessage(error, {cTheme: options.noticeTheme||'alert'});\n}\n}\n\n\n// plugin\n// ------------------------------------------------------","ctx":{"type":"method","name":"_handleError","string":"_handleError()"}},{"tags":[{"type":"class","string":"","html":""},{"type":"example","string":"**使用**\n// containerCreator 创建\ncontainer.states.order = app.actionStates.request({resource: 'order', data:{id: 1}});\n// containerCreator 使用\ncontainer.states.order.update()\n// page - 请求数据\nthis.props.state_order\n// page - 请求状态数据\nthis.props.state_order_state","html":"<p><strong>使用</strong><br />\n// containerCreator 创建<br />\ncontainer.states.order = app.actionStates.request({resource: 'order', data:{id: 1}});<br />\n// containerCreator 使用<br />\ncontainer.states.order.update()<br />\n// page - 请求数据<br />\nthis.props.state_order<br />\n// page - 请求状态数据<br />\nthis.props.state_order_state</p>"}],"description":{"full":"<p><strong>plugin</strong> name: request dependence: network<br />\n提供网络请求与网络请求数据的管理</p>","summary":"<p><strong>plugin</strong> name: request dependence: network<br />\n提供网络请求与网络请求数据的管理</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":true,"isEvent":false,"ignore":false,"line":284,"codeStart":299,"code":"let pluginRequest = {\n  // plugin config\n  // -----------------------------\n  name: 'request',\n  dependence: 'network',\n\n  // event\n  onCreateStoreBefore(app) {\n    Object.assign(app.actions,{\n      request: pluginRequest._request,\n      _requestFetching: pluginRequest._requestFetching,\n      _requestFetchSuccess: pluginRequest._requestFetchSuccess,\n      _requestFetchFail: pluginRequest._requestFetchFail,\n      _requestFetchClear: pluginRequest._requestFetchClear,\n    });\n    app.reduxers.request = pluginRequest._reduxerRequestFetch;\n    app.actionStates.request = pluginRequest._actionStateRequest;\n  },\n\n  // action state\n  // ------------------------------","ctx":{"type":"declaration","name":"pluginRequest","value":"{","string":"pluginRequest"}},{"tags":[{"type":"method","string":"app.actionsStates.request","html":"<p>app.actionsStates.request</p>"},{"type":"param","string":"{ActionStateRequestOptions|NetworkOptions|function} [options] - 本次请求的参数","name":"[options]","description":"<ul>\n<li>本次请求的参数</li>\n</ul>","types":["ActionStateRequestOptions","NetworkOptions","function"],"typesDescription":"<a href=\"ActionStateRequestOptions.html\">ActionStateRequestOptions</a>|<a href=\"NetworkOptions.html\">NetworkOptions</a>|<code>function</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{string} [uuid] - 本次请求的uuid，为空使用随机id，如果该uuid已经存在，则返回该uuid 对象，无需创建","name":"[uuid]","description":"<ul>\n<li>本次请求的uuid，为空使用随机id，如果该uuid已经存在，则返回该uuid 对象，无需创建</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":320,"codeStart":325,"code":"_actionStateRequest(options={}, uuid=null) {\n  return ActionState.instance(ActionStateRequest, app, uuid, options);\n},\n\n// action and reduxer\n// ------------------------------","ctx":{"type":"method","name":"_actionStateRequest","string":"_actionStateRequest()"}},{"tags":[{"type":"property","string":"{string} [_RequestFetchFetching='requestFetchFetching'] - action type","name":"[_RequestFetchFetching='requestFetchFetching']","description":"<ul>\n<li>action type</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":331,"codeStart":334,"code":"_RequestFetchFetching: 'requestFetchFetching',","ctx":{"type":"property","name":"_RequestFetchFetching","value":"'requestFetchFetching',","string":"_RequestFetchFetching"}},{"tags":[{"type":"property","string":"{string} [_RequestFetchInvalid='requestFetchInvalid'] - action type","name":"[_RequestFetchInvalid='requestFetchInvalid']","description":"<ul>\n<li>action type</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":336,"codeStart":339,"code":"_RequestFetchInvalid: 'requestFetchInvalid',","ctx":{"type":"property","name":"_RequestFetchInvalid","value":"'requestFetchInvalid',","string":"_RequestFetchInvalid"}},{"tags":[{"type":"property","string":"{string} [_RequestFetchFetchSuccess='requestFetchFetchSuccess'] - action type","name":"[_RequestFetchFetchSuccess='requestFetchFetchSuccess']","description":"<ul>\n<li>action type</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":341,"codeStart":344,"code":"_RequestFetchFetchSuccess: 'requestFetchFetchSuccess',","ctx":{"type":"property","name":"_RequestFetchFetchSuccess","value":"'requestFetchFetchSuccess',","string":"_RequestFetchFetchSuccess"}},{"tags":[{"type":"property","string":"{string} [_RequestFetchFetchFail='requestFetchFetchFail'] - action type","name":"[_RequestFetchFetchFail='requestFetchFetchFail']","description":"<ul>\n<li>action type</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":346,"codeStart":349,"code":"_RequestFetchFetchFail: 'requestFetchFetchFail',","ctx":{"type":"property","name":"_RequestFetchFetchFail","value":"'requestFetchFetchFail',","string":"_RequestFetchFetchFail"}},{"tags":[{"type":"method","string":"app.actions.request","html":"<p>app.actions.request</p>"},{"type":"param","string":"{ActionStateRequestOptions|NetworkOptions} options - 网络请求及network 网络请求api的参数","name":"options","description":"<ul>\n<li>网络请求及network 网络请求api的参数</li>\n</ul>","types":["ActionStateRequestOptions","NetworkOptions"],"typesDescription":"<a href=\"ActionStateRequestOptions.html\">ActionStateRequestOptions</a>|<a href=\"NetworkOptions.html\">NetworkOptions</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{boolean} isFetch - 是否是为请求型还是提交型","name":"isFetch","description":"<ul>\n<li>是否是为请求型还是提交型</li>\n</ul>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{string} uuid - 请求的uuid","name":"uuid","description":"<ul>\n<li>请求的uuid</li>\n</ul>","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>发起请求</p>","summary":"<p>发起请求</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":351,"codeStart":358,"code":"_request: (options={}, isFetch=false, uuid=getUuid())=>app=>{\n  isFetch&&app.actions._requestFetching(uuid, options, isFetch);\n  ActionStateRequest._handleRequesting(true, app, options, isFetch);\n\n  app.network.fetch&&app.network.fetch(options, isFetch).then( result=>{\n    if(!result) throw app.config.strings.networkError;\n\n    ActionStateRequest._handleRequesting(false, app, options, isFetch);\n    if(options.onSuccess&&options.onSuccess(result.data, result)) return;\n\n    let request = isFetch&&ActionStateRequest.getInstance(ActionStateRequest, uuid);\n    let ret = request&&request.trigger('onWillChange', result.data, result); \n    if(ret)result = ret;\n    if(request && ret===false) return;\n\n    isFetch&&app.actions._requestFetchSuccess(result, uuid, options, isFetch);\n\n    request&&request.trigger('onDidChange', result.data, result);\n  }, error=>{\n    ActionStateRequest._handleRequesting(false, app, options, isFetch);\n    if(options.onError&&options.onError(error)) return;\n\n    isFetch&&app.actions._requestFetchFail(error, uuid, options, isFetch);\n    let request = isFetch&&ActionStateRequest.getInstance(ActionStateRequest, uuid);\n    request&&request.trigger('onChangeError', error);\n    ActionStateRequest._handleError(error, app, options, isFetch);\n  }).catch(error=>{\n    ActionStateRequest._handleRequesting(false, app, options, isFetch);\n    ActionStateRequest._handleError(error, app, options, isFetch);\n  });    \n},","ctx":{"type":"property","name":"_request","value":"(options={}, isFetch=false, uuid=getUuid())=>app=>{","string":"_request"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{stirng} uuid - 唯一id","name":"uuid","description":"<ul>\n<li>唯一id</li>\n</ul>","types":["stirng"],"typesDescription":"<a href=\"stirng.html\">stirng</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{ActionStateRequestOptions|NetworkOptions} options - 网络请求及network 网络请求api的参数","name":"options","description":"<ul>\n<li>网络请求及network 网络请求api的参数</li>\n</ul>","types":["ActionStateRequestOptions","NetworkOptions"],"typesDescription":"<a href=\"ActionStateRequestOptions.html\">ActionStateRequestOptions</a>|<a href=\"NetworkOptions.html\">NetworkOptions</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{boolean} isFetch - 是否是为请求型还是提交型","name":"isFetch","description":"<ul>\n<li>是否是为请求型还是提交型</li>\n</ul>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>更新指定uuid 的请求状态为请求中</p>","summary":"<p>更新指定uuid 的请求状态为请求中</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":390,"codeStart":397,"code":"_requestFetching: (uuid, options, isFetch)=>{\n  return {\n    type: pluginRequest._RequestFetchFetching,\n    uuid,\n  };\n},","ctx":{"type":"property","name":"_requestFetching","value":"(uuid, options, isFetch)=>{","string":"_requestFetching"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{stirng} uuid - 唯一id","name":"uuid","description":"<ul>\n<li>唯一id</li>\n</ul>","types":["stirng"],"typesDescription":"<a href=\"stirng.html\">stirng</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{ActionStateRequestOptions|NetworkOptions} options - 网络请求及network 网络请求api的参数","name":"options","description":"<ul>\n<li>网络请求及network 网络请求api的参数</li>\n</ul>","types":["ActionStateRequestOptions","NetworkOptions"],"typesDescription":"<a href=\"ActionStateRequestOptions.html\">ActionStateRequestOptions</a>|<a href=\"NetworkOptions.html\">NetworkOptions</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{boolean} isFetch - 是否是为请求型还是提交型","name":"isFetch","description":"<ul>\n<li>是否是为请求型还是提交型</li>\n</ul>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>更新指定uuid 的请求的状态与数据</p>","summary":"<p>更新指定uuid 的请求的状态与数据</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":404,"codeStart":411,"code":"_requestFetchSuccess: (result, uuid, options, isFetch)=>{\n  return {\n    type: pluginRequest._RequestFetchFetchSuccess,\n    uuid,\n    result,\n    options,\n  };\n},","ctx":{"type":"property","name":"_requestFetchSuccess","value":"(result, uuid, options, isFetch)=>{","string":"_requestFetchSuccess"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{Error|string} error - 异常信息","name":"error","description":"<ul>\n<li>异常信息</li>\n</ul>","types":["Error","string"],"typesDescription":"<code>Error</code>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{stirng} uuid - 唯一id","name":"uuid","description":"<ul>\n<li>唯一id</li>\n</ul>","types":["stirng"],"typesDescription":"<a href=\"stirng.html\">stirng</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{ActionStateRequestOptions|NetworkOptions} options - 网络请求及network 网络请求api的参数","name":"options","description":"<ul>\n<li>网络请求及network 网络请求api的参数</li>\n</ul>","types":["ActionStateRequestOptions","NetworkOptions"],"typesDescription":"<a href=\"ActionStateRequestOptions.html\">ActionStateRequestOptions</a>|<a href=\"NetworkOptions.html\">NetworkOptions</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{boolean} isFetch - 是否是为请求型还是提交型","name":"isFetch","description":"<ul>\n<li>是否是为请求型还是提交型</li>\n</ul>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>更新指定uuid 的请求错误状态</p>","summary":"<p>更新指定uuid 的请求错误状态</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":420,"codeStart":428,"code":"_requestFetchFail: (error, uuid, options, isFetch)=>{\n  return {\n    type: pluginRequest._RequestFetchFetchFail,\n    uuid,\n    error,\n  };\n},","ctx":{"type":"property","name":"_requestFetchFail","value":"(error, uuid, options, isFetch)=>{","string":"_requestFetchFail"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{stirng} uuid - 唯一id","name":"uuid","description":"<ul>\n<li>唯一id</li>\n</ul>","types":["stirng"],"typesDescription":"<a href=\"stirng.html\">stirng</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{ActionStateRequestOptions|NetworkOptions} options - 网络请求及network 网络请求api的参数","name":"options","description":"<ul>\n<li>网络请求及network 网络请求api的参数</li>\n</ul>","types":["ActionStateRequestOptions","NetworkOptions"],"typesDescription":"<a href=\"ActionStateRequestOptions.html\">ActionStateRequestOptions</a>|<a href=\"NetworkOptions.html\">NetworkOptions</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{boolean} isFetch - 是否是为请求型还是提交型","name":"isFetch","description":"<ul>\n<li>是否是为请求型还是提交型</li>\n</ul>","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"<p>删除指定uuid 的请求数据</p>","summary":"<p>删除指定uuid 的请求数据</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":436,"codeStart":443,"code":"_requestFetchClear: (uuid, options, isFetch)=>(app)=>{\n  let state = app.getState('request',{});\n  delete state.fetchResult[uuid];\n},","ctx":{"type":"property","name":"_requestFetchClear","value":"(uuid, options, isFetch)=>(app)=>{","string":"_requestFetchClear"}},{"tags":[{"type":"method","string":"","html":""},{"type":"param","string":"{object} [state={fetchResult:{}}] - 原状态","name":"[state={fetchResult:{}}]","description":"<ul>\n<li>原状态</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{object} action - action","name":"action","description":"<ul>\n<li>action</li>\n</ul>","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{object} - 新状态","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<ul>\n<li>新状态</li>\n</ul>"}],"description":{"full":"<p>reduxer for request</p>","summary":"<p>reduxer for request</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":448,"codeStart":455,"code":"_reduxerRequestFetch( state = {fetchResult:{}}, action ) {\n  switch (action.type) {\n  case pluginRequest._RequestFetchFetching:\n    return Object.assign({}, state, {\n      uuid: action.uuid,\n      fetchResult: Object.assign({}, state.fetchResult, {\n        [action.uuid]:Object.assign({}, state.fetchResult[action.uuid], {\n          fetching: true,\n        }),\n      }),\n    });\n  case pluginRequest._RequestFetchFetchSuccess:\n    let data = (state.fetchResult[action.uuid]&&state.fetchResult[action.uuid].result)||action.options.initData;\n    if(action.options.append&&action.options.appendField&&data){\n      if(Array.isArray(data)){\n        data = Array.concat(data,action.result);\n      }else{\n        let fileds = Array.isArray(action.options.appendField)?action.options.appendField:(typeof(action.options.appendField)==='string'?[action.options.appendField]:['data']);\n        for(let field of fileds){\n          action.result[field] = Array.concat(data[field]||[],action.result[field]||[]);\n        }\n        data = Object.assign({},data,action.result);\n      }\n    }else{\n      data = action.result;\n    }\n\n    return Object.assign({}, state, {\n      uuid: action.uuid,\n      fetchResult: Object.assign({}, state.fetchResult, {\n        [action.uuid]:Object.assign({}, state.fetchResult[action.uuid], {\n          fetching: false,\n          result: data,\n        }),\n      }),\n    });\n  case pluginRequest._RequestFetchFetchFail:\n    return Object.assign({}, state, {\n      uuid: action.uuid,\n      fetchResult: Object.assign({}, state.fetchResult, {\n        [action.uuid]:Object.assign({}, state.fetchResult[action.uuid], {\n          fetching: false,\n          error: action.error,\n        }),\n      }),\n    });\n  default:\n    return state;\n  }\n}\n}\n\n\nexport default pluginRequest;","ctx":{"type":"method","name":"_reduxerRequestFetch","string":"_reduxerRequestFetch()"}}]
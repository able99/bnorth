//=======================
// root
//=======================
.#{$namespace}root {
  display: block;
  height: 100%;
  width: 100%;
  overflow: hidden;
}

.#{$namespace}root-pc {
  display: block;
  height: 100%;
  width: 100%;
  max-width: $base-root-max-width;
  overflow: hidden;
}

//=======================
// float
//=======================
.#{$namespace}cf {
  @extend %clearfix;
}

@each $s, $float in (
  l: left,
  r: right,
  n:none) {
  .#{$namespace}f#{$s} {
    float: #{$float};
  }
}

//=======================
// margin padding
//=======================
@mixin makeSpacings($dimension: null) {
  @each $space-key, $space-value in $am-spaces {
    $padding-selector: 'padding';
    $margin-selector: 'margin';
    $dash: '';

    @if $dimension {
      $dash: '-' + $dimension;
    }

    @if $space-key != 'default' {
      $dash: $dash + '-' + $space-key;
    }

    $padding-selector: $padding-selector + $dash;
    $margin-selector: $margin-selector + $dash;

    // horizontal spacing
    @if $dimension == h {
      .#{$namespace}#{$padding-selector} {
        padding-left: $space-value !important;
        padding-right: $space-value !important;
      }

      .#{$namespace}#{$margin-selector} {
        margin-left: $space-value !important;
        margin-right: $space-value !important;
      }
      // vertical spacing
    } @else if $dimension == v {
      .#{$namespace}#{$padding-selector} {
        padding-top: $space-value !important;
        padding-bottom: $space-value !important;
      }

      .#{$namespace}#{$margin-selector} {
        margin-top: $space-value !important;
        margin-bottom: $space-value !important;
      }
    } @else {
      $paddingProperty: 'padding';
      $marginProperty: 'margin';

      @if $dimension {
        $paddingProperty: $paddingProperty + '-' + $dimension;
        $marginProperty: $marginProperty + '-' + $dimension;
      }

      .#{$namespace}#{$padding-selector} {
        #{$paddingProperty}: $space-value !important;
      }

      .#{$namespace}#{$margin-selector} {
        #{$marginProperty}: $space-value !important;
      }
    }
  }
}
@each $dimension in $am-dimensions {
  @include makeSpacings($dimension);
}


//=======================
// text

@each $key, $size in $am-sizes {
  .#{$namespace}typo-size-#{$key} {
    font-size: $size !important;
  }
}

.#{$namespace}text-truncate {
  @extend %text-truncate;
}

// Text Alignment
@each $align in (left, right, center, justify) {
  .#{$namespace}text-#{$align} {
    text-align: $align !important;
  }
}

// Text colors
@each $key, $color in $am-colors {
  .#{$namespace}text-#{$key} {
    color: $color !important;
  }
}

//=======================
// border

@each $key, $color in $am-colors {
  @if $key != none {
    .#{$namespace}border-color-#{$key} {
      border-color: $color !important;
    }
  }
}
@each $key, $val in $am-radius {
  .#{$namespace}border-radius-#{$key} {
    border-radius: $val !important;
  }  
}
.#{$namespace}border-none {
  border: none !important;
}
@mixin makeBorderNones($dimension: null) {
  $selector: 'border-none';

  @if $dimension {
    $selector: $selector + '-' + $dimension;
  }

  @if $dimension == h {
    .#{$namespace}#{$selector} {
      border-left: none !important;
      border-right: none !important;
    }
  } @else if $dimension == v {
    .#{$namespace}#{$selector} {
      border-top: none !important;
      border-bottom: none !important;
    }
  } @else {
    $property: 'border';
    @if $dimension {
      $property: 'border-' + $dimension;
    }

    .#{$namespace}#{$selector} {
      #{$property}: none !important;
    }
  }
}
@each $dimension in $am-dimensions {
  @include makeBorderNones($dimension);
}

//=======================
// background

@each $key, $color in $am-colors {
  @if $key != none {
    .#{$namespace}bg-#{$key} {
      background-color: $color !important;
    }
  }
}
.#{$namespace}background-none {
  background: none !important;
}


//=======================
// visibility

.#{$namespace}visibility-show {
  visibility: visible;
}
.#{$namespace}visibility-hide {
  visibility: hidden;
}

//=======================
// width height

$layout-size-max-length:  200;
@for $i from 1 through $layout-size-max-length { 
  @if ($i <= 10) OR ($i % 10 == 0) {
    .#{$namespace}layout-size-squre-#{$i} { 
      @include square(#{$i}px);
    } 
    .#{$namespace}layout-size-width-auto-#{$i} { 
      @include size(#{$i}px, auto);
    } 
    .#{$namespace}layout-size-height-auto-#{$i} { 
      @include size(auto, #{$i}px);
    } 
    .#{$namespace}layout-size-min-width-#{$i} { 
      min-width: #{$i}px;
    }
    .#{$namespace}layout-size-min-height-#{$i} { 
      min-height: #{$i}px;
    }
  } 
} 

$layout-size-percent:  100;
@for $i from 0 through $layout-size-percent { 
  .#{$namespace}layout-size-width-auto-#{$i}p { 
    width:#{$i}#{%};
  } 
} 

$layout-size-rem:  30;
@for $i from 1 through $layout-size-rem { 
  .#{$namespace}layout-size-squre-#{$i}rem { 
    width:#{($i/10)}rem;
    height:#{($i/10)}rem;
  } 
} 

//==========================================================
//able99 z index

.#{$namespace}layout-z-line{
  z-index: 15;
}

//==========================================================
// old 

.#{$namespace}align-v {
  display: flex;
  align-items: center;
  justify-content: space-between;

  $align-values: (
    'top': flex-start,
    'center': center,
    'bottom': flex-end,
  );

  @each $orient in (top, center, bottom) {
    .#{$namespace}align-#{$orient} {
      align-self: map-get($align-values, $orient);
    }
  }
}



//==========================================================
// layout

// layout
$layout-map-direction: (
  'h':  row,
  'v':  column ,
  'hv': row-reverse,
  'vv': column-reverse,
);
$layout-map-justify: (
  null:      flex-start,
  'start':   flex-start,
  'center':  center,
  'end':     flex-end,
  'between': space-between,
  'around':  space-around,
);
$layout-map-align: (
  null:       flex-start,
  'start':    flex-start,
  'center':   center,
  'end':      flex-end,
  'baseline': baseline,
  'stretch':  stretch,
);

@each $direction-key, $direction in $layout-map-direction {
  @each $justify-key, $justify in $layout-map-justify {
    @each $align-key, $align in $layout-map-align {
      $selector: #{$namespace}layout;
      @if $direction-key != null {
        $selector: $selector + "-" + $direction-key;
      }
      @if $justify-key != null {
        $selector: $selector + "-" + $justify-key;
      }
      @if $align-key != null {
        $selector: $selector + "-" + $align-key;
      }

      .#{$selector}{
        display:         flex;
        flex-direction:  $direction;
        justify-content: $justify;
        align-items:     $align;
      }
    }
  }
}

// wrap
$layout-warp: (warp,nowrap,wrap-reverse) !default;
@each $wrap in $layout-warp {
  .#{$namespace}layout-wrap {
    flex-wrap: $wrap;
  }
}

// sub align
@each $key, $align in $layout-map-align {
  @if $key != null {
    .#{$namespace}layout-sub-align-#{$key} {
      align-self: $align;
    }
  }
}

// sub order
$layout-sub-order-length:  5;
@for $i from 0 through $layout-sub-order-length { 
  .#{$namespace}layout-sub-order { 
    order: $i;
  } 
} 

// sub flex
$layout-sub-flex-length: (none, auto, 0, 1, 2, 3, 4, 5) !default;
@each $val in $layout-sub-flex-length { 
  .#{$namespace}layout-sub-flex-grow-#{$val} { 
    flex-grow: $val
  } 
  .#{$namespace}layout-sub-flex-shrink-#{$val} { 
    flex-shrink: $val;
  } 
} 
.#{$namespace}layout-sub-flex-grow { 
  flex: 1 0 auto;
} 
.#{$namespace}layout-sub-flex-shrink { 
  flex: 0 1 auto;
} 
.#{$namespace}layout-sub-flex-auto { 
  flex: auto;
} 
.#{$namespace}layout-sub-flex-none { 
  flex: none;
} 
